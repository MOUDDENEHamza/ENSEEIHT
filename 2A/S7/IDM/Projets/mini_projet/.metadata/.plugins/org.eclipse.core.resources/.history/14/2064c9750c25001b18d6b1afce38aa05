// automatically generated by Xtext
grammar fr.n7.simplepdl.txt.PDL with org.eclipse.xtext.common.Terminals

import "http://simplepdl" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Process returns Process:
	{Process}
	'Process'
	name=EString
	'{'
		('processElements' '{' processElements+=ProcessElements ( "," processElements+=ProcessElements)* '}' )?
	'}';

ProcessElements returns ProcessElements:
	WorkDefinition | WorkSequence | Guidance | Ressource;





EString returns ecore::EString:
	STRING | ID;

WorkDefinition returns WorkDefinition:
	{WorkDefinition}
	'WorkDefinition'
	name=EString
	'{'
		('linksToPredecessors' '(' linksToPredecessors+=[WorkSequence|EString] ( "," linksToPredecessors+=[WorkSequence|EString])* ')' )?
		('linksToSuccessors' '(' linksToSuccessors+=[WorkSequence|EString] ( "," linksToSuccessors+=[WorkSequence|EString])* ')' )?
		('Allocate' '{' Allocate+=Allocate ( "," Allocate+=Allocate)* '}' )?
	'}';

WorkSequence returns WorkSequence:
	'WorkSequence'
	'{'
		'linkType' linkType=WorkSequenceType
		'predecessor' predecessor=[WorkDefinition|EString]
		'successor' successor=[WorkDefinition|EString]
	'}';

Guidance returns Guidance:
	'Guidance'
	'{'
		'text' text=EString
		('elements' '(' elements+=[ProcessElements|EString] ( "," elements+=[ProcessElements|EString])* ')' )?
	'}';

Ressource returns Ressource:
	'Ressource'
	name=EString
	'{'
		'quantite' quantite=EInt
		('Allocate' '(' Allocate+=[Allocate|EString] ( "," Allocate+=[Allocate|EString])* ')' )?
	'}';

Allocate returns Allocate:
	'Allocate'
	'{'
		'occurences' occurences=EInt
		'ressource' ressource=[Ressource|EString]
		'workdefinition' workdefinition=[WorkDefinition|EString]
	'}';

EInt returns ecore::EInt:
	'-'? INT;

enum WorkSequenceType returns WorkSequenceType:
				startToStart = 'startToStart' | finishToStart = 'finishToStart' | startToFinish = 'startToFinish' | finishToFinish = 'finishToFinish';
