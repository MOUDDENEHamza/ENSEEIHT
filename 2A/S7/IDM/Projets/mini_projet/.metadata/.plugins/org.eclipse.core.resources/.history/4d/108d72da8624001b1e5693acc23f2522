[comment encoding = UTF-8 /]
[module toTina('http://petrinet/')]


[template public petrinetToTina(aPetriNet : PetriNet)]
[comment @main/]
[file (aPetriNet.name +'.net', false, 'UTF-8')]
net [aPetriNet.name/]
[let places : OrderedSet(Place) = aPetriNet.getPlaces() ]
		[for (p : Place | places)]
pl [p.name/] ([p.tokens/])
		[/for]
[/let]
[let Trs : OrderedSet(Transition) = aPetriNet.getTransitions() ]
		[for (t : Transition | Trs)]
tr [t.name/] [lesArcsSource(t.getSources())/] -> [lesArcsDestination(t.getDestinatins())/]
		[/for]
[/let]
[/file]
[/template]

[query public getPlaces(p: PetriNet) : OrderedSet(Place) = 
	p.petrinetelement->select( e | e.oclIsTypeOf(Place) )
		->collect( e | e.oclAsType(Place) )
		->asOrderedSet()
/]

[query public getTransitions(p: PetriNet) : OrderedSet(Transition) = 
	p.petrinetelement->select( e | e.oclIsTypeOf(Transition) )
		->collect( e | e.oclAsType(Transition) )
		->asOrderedSet()
/]

[query public getSources(t: Transition) : OrderedSet(Edge) = 
	t.linkToSource->select( e | e.oclIsTypeOf(Edge) )
		->collect( e | e.oclAsType(Edge) )
		->asOrderedSet()
/]

[query public getDestinatins(t: Transition) : OrderedSet(Edge) = 
	t.linkToCible->select( e | e.oclIsTypeOf(Edge) )
		->collect( e | e.oclAsType(Edge) )
		->asOrderedSet()
/]

[template public lesArcsSource(arcs : OrderedSet(Edge)) post (trim()) ]
	[for (a : Edge | arcs)][a.source.name/][if (a.type = arc_type::read_arc)]?[a.tokens/][elseif (a.tokens > 1)]*[a.tokens/][else] [/if][/for]
[/template]

[template public lesArcsDestination(arcs : OrderedSet(Edge)) post (trim()) ]
	[for (a : Edge | arcs)][a.destination.name/] [/for]
[/template]