[comment encoding = UTF-8 /]
[module toTina('http://petrinet/')]


[template public petrinetToTina(aPetriNet : PetriNet)]
[comment @main/]
[file (aPetriNet.name +'.net', false, 'UTF-8')]
net [aPetriNet.name/]
[let places : OrderedSet(Place) = aPetriNet.getPlaces() ]
		[for (p : Place | places)]
pl [p.name/] ([p.tokens/])
		[/for]
[/let]
[let ns : OrderedSet(Node) = aPetriNet.getNode() ]
		[for (n : Node | ns)]
tr [t.name/] [lesArcsSource(n.getSources())/] -> [lesArcsDestination(n.getDestinations())/]
		[/for]
[/let]
[/file]
[/template]

[query public getPlaces(p: PetriNet) : OrderedSet(Place) = 
	p.petrinetelement->select( e | e.oclIsTypeOf(Place) )
		->collect( e | e.oclAsType(Place) )
		->asOrderedSet()
/]

[query public getTransitions(p: PetriNet) : OrderedSet(Transition) = 
	p.petrinetelement->select( e | e.oclIsTypeOf(Transition) )
		->collect( e | e.oclAsType(Transition) )
		->asOrderedSet()
/]

[query public getSource(t: Transition) : OrderedSet(Edge) = 
	t.linkToSource.->select( e | e.oclIsTypeOf(Edge) )
		->collect( e | e.oclAsType(Edge) )
		->asOrderedSet()
/]

[query public getDestination(t: Transition) : OrderedSet(Edge) = 
	t.getDestinations()->select( e | e.oclIsTypeOf(Edge) )
		->collect( e | e.oclAsType(Edge) )
		->asOrderedSet()
/]

[template public lesArcsSource(edge : OrderedSet(Edge)) post (trim()) ]
	[for (e : Edge | edge)][e.source.name/][if (e.type = arc_type::read_arc)]?[e.tokens/][elseif (e.tokens > 1)]*[e.tokens/][else] [/if][/for]
[/template]

[template public lesArcsDestination(edge : OrderedSet(Edge)) post (trim()) ]
	[for (e : Edge | edge)][e.cible.name/] [/for]
[/template]
