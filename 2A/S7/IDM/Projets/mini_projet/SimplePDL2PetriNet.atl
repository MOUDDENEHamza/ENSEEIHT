module SimplePDL2PetriNet;
create OUT: petrinet from  IN: simplepdl;

-- Obtenir le processus qui contient ce process element.
-- Remarque: Ce helper ne serait pas utile si une référence opposite
-- avait été placée entre Process et ProcessElement
helper context simplepdl!ProcessElements
def: getProcess(): simplepdl!Process =
	simplepdl!Process.allInstances()
		->select(p | p.processElements->includes(self))
		->asSequence()->first();

-- Traduire un Process en un PetriNet de même nom
rule Process2PetriNet {
	from p: simplepdl!Process
	to pn: petrinet!PetriNet (name <- p.name)
}

-- Traduire une WorkDefinition en un motif sur le réseau de Petri
rule WorkDefinition2PetriNet {
	from wd: simplepdl!WorkDefinition
	to
		-- PLACES d'une WorkDefinition
		p_ready: petrinet!Place(
			name <- wd.name + '_ready',
			tokens <- 1,
			net <- wd.getProcess()),
				
		p_running: petrinet!Place(
            name <- wd.name + '_running',
            tokens <- 0,
            net <- wd.getProcess()),
        
        p_finished: petrinet!Place(
            name <- wd.name + '_finished',
            tokens <- 0,
            net <- wd.getProcess()),
            
        p_started: petrinet!Place(
            name <- wd.name + '_started',
            tokens <- 0,
            net <- wd.getProcess()),
        
        t_start: petrinet!Transition(
            name <- wd.name + '_start',
            net <- wd.getProcess()),
            
        t_finish: petrinet!Transition(
            name <- wd.name + '_finish',
            net <- wd.getProcess()
		),
        
        e_ready_start: petrinet!Edge(
            source <- p_ready,
            cible <- t_start,
            tokens <- 1,
            type <- #normal,
            net <- wd.getProcess()),
        
        e_start_started: petrinet!Edge(
            source <- t_start,
            cible <- p_started,
            tokens <- 1,
            type <- #normal,
            net <- wd.getProcess()),
        
        e_start_running: petrinet!Edge(
            source <- t_start,
            cible <- p_running,
            tokens <- 1,
            type <- #normal,
            net <- wd.getProcess()),
        
        e_running_finish: petrinet!Edge(
            source <- p_running,
            cible <- t_finish,
            tokens <- 1,
            type <- #normal,
            net <- wd.getProcess()),
        
        e_finish_finished: petrinet!Edge(
            source <- t_finish,
            cible <- p_finished,
            tokens <- 1,
            type <- #normal,
            net <- wd.getProcess())
}

rule WorkSequence2PetriNet {
    from workSequence: simplepdl!WorkSequence
    
    to
        e_first_second: petrinet!Edge(
            source <-   if (workSequence.linkType = #startToFinish or workSequence.linkType = #startToStart) then
                            thisModule.resolveTemp(workSequence.predecessor, 'p_started')
                        else
                              thisModule.resolveTemp(workSequence.predecessor, 'p_finished')
                        endif,
            cible <-        if (workSequence.linkType = #startToStart or workSequence.linkType = #finishToStart) then
                            thisModule.resolveTemp(workSequence.successor, 't_start')
                        else
                            thisModule.resolveTemp(workSequence.successor, 't_finish')
                        endif,
            tokens <- 1,
            type <- #read_arc,
            net <- workSequence.successor.getProcess()
			)
}


rule Ressource2PetriNet {
	from ressource: simplepdl!Ressource
	
	to
		p_ressource: petrinet!Place(
			name <- ressource.name,
			tokens <- ressource.quantite,
			net <- ressource.getProcess())
}

rule Allocate2PetriNet {
	from allocate: simplepdl!Allocate
	
	to
		e_take_ressource: petrinet!Edge(
			source <- allocate.ressource,
			cible <- thisModule.resolveTemp(allocate.workDefinition, 't_start'),
			tokens <- allocate.occurences,
			type <- #normal,
			net <- allocate.ressource.getProcess()
		),
			
		e_release_ressource: petrinet!Edge(
			source <- allocate.ressource,
			cible <- thisModule.resolveTemp(allocate.workDefinition, 't_finish'),
			tokens <- allocate.occurencest,
			type <- #normal,
			net <- allocate.ressource.getProcess()
		)
}

