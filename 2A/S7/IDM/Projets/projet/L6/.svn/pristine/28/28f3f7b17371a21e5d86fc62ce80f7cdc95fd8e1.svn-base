import 'JEU.ecore'

package jEU

context Jeu
	-- Verifier que le nom du jeu n'est pas nul
	inv nomjeuNul ('Le jeu n a pas un nom'):
		name <> null
		
	-- Verifier que le nom du jeu n'est pas vide
	inv nomjeuVide ('Le nom du jeu est vide'):
		name <> ''		

context JeuElement 

	-- Verifier que le nom d'un élèment du jeu n'est pas nul
	inv nomjeuNul ('Le jeu n a pas un nom'):
		name <> null
		
	-- Verifier que le nom d'un élèment du jeu n'est pas vide
	inv nomjeuVide ('Le nom du jeu est vide'):
		name <> ''		

	--Les elements du jeu doivent avoir des noms différents
	inv nomjeuelementUnique :
		self.Jeu -> forAll(e1 ,e2 | e1.name = e2.name implies e1 = e2)
		
	--Un jeu dispose d'un seul lieu de type début
	inv debutUnique : 
		self.Jeu -> select(d|d.oclIsTypeOf(Lieu))
				-> collect(d|d.oclAsType(Lieu))
				-> select(d| d.type  = typeLieu::debut)
				-> size() = 1
	
	--Un jeu dispose d'un moins un lieu de type fin 	
	inv finLieu : 
		self.Jeu -> select(d|d.oclIsTypeOf(Lieu))
				-> collect(d|d.oclAsType(Lieu))
				-> select(d| d.type  = typeLieu::fin)
				-> size() >= 1	


context Joueur 
 	
 	--Le joueur a une taille d'inventaire positive
 	inv tailleinventairePositive : tailleinventaire >= 0
 	
 	--Le joueur ne peut pas porter une charge d'objets depassant sa taille d'inventaire
 	inv chargeLimite : 
 		objets -> collect (taille*quantite)
 					-> sum() <= tailleinventaire
 	
 	--Le joueur ne peut pas posseder deux objets identiques 
 	inv objetsDifferent :
 		objets -> forAll(o1, o2 | o1.name = o2.name implies o1 = o2) 

	 --Le joueur ne peut pas posseder deux connaissances identiques 
 	inv connaissancesDifferent :
 		connaissance -> forAll(c1, c2 | c1.name = c2.name implies c1 = c2) 

	

context Lieu
	
	--Un lieu ne peut pas avoir deux personnes identiques 
	inv personneUnique : 
		personnes -> forAll(p1,p2 | p1.name = p2.name implies p1 = p2)

context Chemin 

	--Le lieu source d'un chemin doit etre différent du lieu destination
	inv lieuDifferent :
		source <> destination

context Objet 

	--Un objet a une taille positive 
	inv tailleobjetPositive : taille >= 0
	
	--Un objet a une quantite positive
	inv quantiteobjetPositive : quantite >= 0
	
	
context AllocateurObjet 

	--La quantite à allouer doit etre positive 
	inv quantiteobjetAllocation : quantite >= 0
	
	--Il est impossible d'allouer au joueur une quantite de l'objet supérieure à la quantité présente de l'objet  
	inv quantiteInsuffisante : self.quantite <= objetAlloue.quantite

context Interaction 
	
	--L'interaction se fait entre une personne existante et l'explorateur 
	inv personneDefinie :
		personne <> null 
		
	--Les choix offerts par l'interaction doivent etre differents
	inv choixDifferent : 
		choix -> forAll(ch1, ch2 | ch1.name = ch2.name implies ch1 = ch2)

context condition 
		
	--Deux conditions ne peuvent pas etre identiques
	inv conditionsDifferent : 
		condition.allInstances() -> forAll(c1,c2 | c1.name = c2.name implies c1 = c2)
	
context Personne 

	-- L'interaction de cette personne doit etre bien définie
	inv interactionNul : 
		interaction <> null
		
	inv interactionDefinit :
		interaction.personne = name 
	
	
context choix 

	--Les actions selon un choix doivent etre differents 
	inv actionsDifferent : 
	actions -> forAll(a1,a2 | a1.name = a2.name implies a1 = a2)

	--Si elle existe, une condition de fin ne doit pas etre nulle
	inv conditionfinNul :
		conditionFin <> null

context action 

	--Les choix suivant une action doivent etre different 
	inv choixsuivantsDifferent : 
		choixSuivants -> forAll(c1, c2 | c1.name = c2.name implies c1 = c2)

endpackage