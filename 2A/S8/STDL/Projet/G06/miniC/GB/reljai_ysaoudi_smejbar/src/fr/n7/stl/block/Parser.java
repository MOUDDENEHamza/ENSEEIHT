
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package fr.n7.stl.block;

import java_cup.runtime.*;
import fr.n7.stl.block.Lexer;
import java.io.IOException;
import java.io.PrintStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.*;
import fr.n7.stl.block.ast.*;
import fr.n7.stl.block.ast.expression.*;
import fr.n7.stl.block.ast.expression.accessible.*;
import fr.n7.stl.block.ast.expression.allocation.*;
import fr.n7.stl.block.ast.expression.assignable.*;
import fr.n7.stl.block.ast.expression.value.*;
import fr.n7.stl.block.ast.instruction.*;
import fr.n7.stl.block.ast.instruction.declaration.*;
import fr.n7.stl.block.ast.scope.*;
import fr.n7.stl.block.ast.type.*;
import fr.n7.stl.block.ast.type.declaration.*;
import fr.n7.stl.util.*;
import fr.n7.stl.tam.ast.Fragment;
import fr.n7.stl.tam.ast.Register;
import fr.n7.stl.tam.ast.TAMFactory;
import fr.n7.stl.tam.ast.impl.TAMFactoryImpl;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;
import fr.n7.stl.block.ast.Block;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\011\005\000\002\010\004\000\002\010\003" +
    "\000\002\013\003\000\002\012\005\000\002\012\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\007\000\002\016\007" +
    "\000\002\016\004\000\002\016\004\000\002\016\007\000" +
    "\002\004\004\000\002\004\002\000\002\015\003\000\002" +
    "\015\004\000\002\015\005\000\002\015\005\000\002\014" +
    "\006\000\002\014\004\000\002\006\007\000\002\006\010" +
    "\000\002\006\007\000\002\006\006\000\002\006\010\000" +
    "\002\005\003\000\002\005\006\000\002\005\005\000\002" +
    "\005\011\000\002\005\007\000\002\005\007\000\002\005" +
    "\005\000\002\007\005\000\002\007\003\000\002\021\003" +
    "\000\002\021\004\000\002\021\006\000\002\021\005\000" +
    "\002\021\006\000\002\021\006\000\002\021\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\004\000\002\020\004\000\002\020\004\000\002\020" +
    "\004\000\002\020\004\000\002\020\004\000\002\020\006" +
    "\000\002\020\005\000\002\020\007\000\002\020\005\000" +
    "\002\020\006\000\002\020\006\000\002\020\005\000\002" +
    "\020\007\000\002\020\003\000\002\020\006\000\002\020" +
    "\005\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\007\000\002\020\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\004\066\005\001\002\000\004\002\314\001" +
    "\002\000\004\034\006\001\002\000\050\022\uffea\030\uffea" +
    "\035\uffea\040\uffea\046\uffea\050\uffea\052\uffea\053\uffea\054" +
    "\uffea\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea\062\uffea" +
    "\063\uffea\064\uffea\065\uffea\066\uffea\001\002\000\004\002" +
    "\001\001\002\000\050\022\013\030\020\035\032\040\040" +
    "\046\021\050\035\052\034\053\014\054\024\055\015\056" +
    "\025\057\027\060\036\061\030\062\031\063\012\064\016" +
    "\065\037\066\022\001\002\000\050\022\uffeb\030\uffeb\035" +
    "\uffeb\040\uffeb\046\uffeb\050\uffeb\052\uffeb\053\uffeb\054\uffeb" +
    "\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063" +
    "\uffeb\064\uffeb\065\uffeb\066\uffeb\001\002\000\020\005\ufff5" +
    "\022\ufff5\030\ufff5\031\ufff5\036\ufff5\041\ufff5\066\ufff5\001" +
    "\002\000\010\022\013\030\020\066\153\001\002\000\046" +
    "\011\061\020\065\022\051\025\062\030\055\032\063\033" +
    "\060\034\053\040\067\051\071\066\056\067\064\070\070" +
    "\071\050\072\054\073\047\074\057\075\052\001\002\000" +
    "\026\040\040\056\025\057\027\060\036\061\030\062\031" +
    "\063\012\064\016\065\037\066\042\001\002\000\020\005" +
    "\ufff4\022\ufff4\030\ufff4\031\ufff4\036\ufff4\041\ufff4\066\ufff4" +
    "\001\002\000\050\022\uffde\030\uffde\035\uffde\040\uffde\046" +
    "\uffde\050\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde" +
    "\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065" +
    "\uffde\066\uffde\001\002\000\024\022\013\030\020\060\036" +
    "\061\030\062\031\063\012\064\016\065\037\066\276\001" +
    "\002\000\004\030\270\001\002\000\016\006\uffd5\012\uffd5" +
    "\022\ufff1\030\ufff1\036\uffd5\066\ufff1\001\002\000\010\022" +
    "\234\030\235\066\233\001\002\000\026\040\040\056\025" +
    "\057\027\060\036\061\030\062\031\063\012\064\016\065" +
    "\037\066\042\001\002\000\004\066\223\001\002\000\010" +
    "\006\156\012\220\036\155\001\002\000\004\066\210\001" +
    "\002\000\020\005\ufff7\022\ufff7\030\ufff7\031\ufff7\036\ufff7" +
    "\041\ufff7\066\ufff7\001\002\000\020\005\ufff6\022\ufff6\030" +
    "\ufff6\031\ufff6\036\ufff6\041\ufff6\066\ufff6\001\002\000\054" +
    "\002\uffff\022\uffff\030\uffff\035\uffff\040\uffff\046\uffff\047" +
    "\uffff\050\uffff\052\uffff\053\uffff\054\uffff\055\uffff\056\uffff" +
    "\057\uffff\060\uffff\061\uffff\062\uffff\063\uffff\064\uffff\065" +
    "\uffff\066\uffff\001\002\000\016\005\ufff2\022\ufff2\030\ufff2" +
    "\036\ufff2\041\ufff2\066\ufff2\001\002\000\046\011\061\020" +
    "\065\022\051\025\062\030\055\032\063\033\060\034\053" +
    "\040\067\051\071\066\056\067\064\070\070\071\050\072" +
    "\054\073\047\074\057\075\052\001\002\000\004\030\046" +
    "\001\002\000\020\005\ufff8\022\ufff8\030\ufff8\031\ufff8\036" +
    "\ufff8\041\ufff8\066\ufff8\001\002\000\020\005\ufff3\022\ufff3" +
    "\030\ufff3\031\ufff3\036\ufff3\041\ufff3\066\ufff3\001\002\000" +
    "\026\040\040\056\025\057\027\060\036\061\030\062\031" +
    "\063\012\064\016\065\037\066\042\001\002\000\004\005" +
    "\043\001\002\000\016\005\ufff1\022\ufff1\030\ufff1\036\ufff1" +
    "\041\ufff1\066\ufff1\001\002\000\026\040\040\056\025\057" +
    "\027\060\036\061\030\062\031\063\012\064\016\065\037" +
    "\066\042\001\002\000\004\041\045\001\002\000\016\005" +
    "\uffec\022\uffec\030\uffec\036\uffec\041\uffec\066\uffec\001\002" +
    "\000\046\011\061\020\065\022\051\025\062\030\055\032" +
    "\063\033\060\034\053\040\067\051\071\066\056\067\064" +
    "\070\070\071\050\072\054\073\047\074\057\075\052\001" +
    "\002\000\056\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad" +
    "\017\uffad\020\uffad\022\uffad\023\uffad\024\uffad\026\uffad\027" +
    "\uffad\031\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad" +
    "\042\uffad\043\uffad\044\uffad\045\uffad\001\002\000\056\004" +
    "\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\017\uffb0\020\uffb0" +
    "\022\uffb0\023\uffb0\024\uffb0\026\uffb0\027\uffb0\031\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\001\002\000\046\011\061\020\065\022" +
    "\051\025\062\030\055\032\063\033\060\034\053\040\067" +
    "\051\071\066\056\067\064\070\070\071\050\072\054\073" +
    "\047\074\057\075\052\001\002\000\056\004\uffae\005\uffae" +
    "\006\uffae\007\uffae\010\uffae\017\uffae\020\uffae\022\uffae\023" +
    "\uffae\024\uffae\026\uffae\027\uffae\031\uffae\035\uffae\036\uffae" +
    "\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045" +
    "\uffae\001\002\000\046\011\061\020\065\022\051\025\062" +
    "\030\055\032\063\033\060\034\053\040\067\051\071\066" +
    "\056\067\064\070\070\071\050\072\054\073\047\074\057" +
    "\075\052\001\002\000\056\004\uffac\005\uffac\006\uffac\007" +
    "\uffac\010\uffac\017\uffac\020\uffac\022\uffac\023\uffac\024\uffac" +
    "\026\uffac\027\uffac\031\uffac\035\uffac\036\uffac\037\uffac\040" +
    "\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\001\002" +
    "\000\062\011\061\020\065\022\051\025\062\030\055\032" +
    "\063\033\060\034\053\040\067\051\071\060\036\061\030" +
    "\062\031\063\012\064\016\065\037\066\173\067\064\070" +
    "\070\071\050\072\054\073\047\074\057\075\052\001\002" +
    "\000\060\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\017" +
    "\uffb3\020\uffb3\022\uffb3\023\uffb3\024\uffb3\026\uffb3\027\uffb3" +
    "\030\164\031\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041" +
    "\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\001\002\000\056" +
    "\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\017\uffaf\020" +
    "\uffaf\022\uffaf\023\uffaf\024\uffaf\026\uffaf\027\uffaf\031\uffaf" +
    "\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043" +
    "\uffaf\044\uffaf\045\uffaf\001\002\000\046\011\061\020\065" +
    "\022\051\025\062\030\055\032\063\033\060\034\053\040" +
    "\067\051\071\066\056\067\064\070\070\071\050\072\054" +
    "\073\047\074\057\075\052\001\002\000\046\011\061\020" +
    "\065\022\051\025\062\030\055\032\063\033\060\034\053" +
    "\040\067\051\071\066\056\067\064\070\070\071\050\072" +
    "\054\073\047\074\057\075\052\001\002\000\010\022\013" +
    "\030\020\066\153\001\002\000\046\011\061\020\065\022" +
    "\051\025\062\030\055\032\063\033\060\034\053\040\067" +
    "\051\071\066\056\067\064\070\070\071\050\072\054\073" +
    "\047\074\057\075\052\001\002\000\056\004\uffaa\005\uffaa" +
    "\006\uffaa\007\uffaa\010\uffaa\017\uffaa\020\uffaa\022\uffaa\023" +
    "\uffaa\024\uffaa\026\uffaa\027\uffaa\031\uffaa\035\uffaa\036\uffaa" +
    "\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045" +
    "\uffaa\001\002\000\046\011\061\020\065\022\051\025\062" +
    "\030\055\032\063\033\060\034\053\040\067\051\071\066" +
    "\056\067\064\070\070\071\050\072\054\073\047\074\057" +
    "\075\052\001\002\000\044\006\111\010\114\017\102\020" +
    "\116\022\113\023\105\024\107\026\100\027\101\031\147" +
    "\036\104\040\110\041\117\042\112\043\115\044\103\045" +
    "\106\001\002\000\046\011\061\020\065\022\051\025\062" +
    "\030\055\032\063\033\060\034\053\040\067\051\071\066" +
    "\056\067\064\070\070\071\050\072\054\073\047\074\057" +
    "\075\052\001\002\000\056\004\uffab\005\uffab\006\uffab\007" +
    "\uffab\010\uffab\017\uffab\020\uffab\022\uffab\023\uffab\024\uffab" +
    "\026\uffab\027\uffab\031\uffab\035\uffab\036\uffab\037\uffab\040" +
    "\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\001\002" +
    "\000\026\040\040\056\025\057\027\060\036\061\030\062" +
    "\031\063\012\064\016\065\037\066\042\001\002\000\006" +
    "\030\074\036\073\001\002\000\046\011\061\020\065\022" +
    "\051\025\062\030\055\032\063\033\060\034\053\040\067" +
    "\051\071\066\056\067\064\070\070\071\050\072\054\073" +
    "\047\074\057\075\052\001\002\000\004\031\075\001\002" +
    "\000\056\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\017" +
    "\uffa8\020\uffa8\022\uffa8\023\uffa8\024\uffa8\026\uffa8\027\uffa8" +
    "\031\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042" +
    "\uffa8\043\uffa8\044\uffa8\045\uffa8\001\002\000\044\006\111" +
    "\010\114\017\102\020\116\022\113\023\105\024\107\026" +
    "\100\027\101\036\104\037\077\040\110\041\117\042\112" +
    "\043\115\044\103\045\106\001\002\000\056\004\uffa9\005" +
    "\uffa9\006\uffa9\007\uffa9\010\uffa9\017\uffa9\020\uffa9\022\uffa9" +
    "\023\uffa9\024\uffa9\026\uffa9\027\uffa9\031\uffa9\035\uffa9\036" +
    "\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9" +
    "\045\uffa9\001\002\000\046\011\061\020\065\022\051\025" +
    "\062\030\055\032\063\033\060\034\053\040\067\051\071" +
    "\066\056\067\064\070\070\071\050\072\054\073\047\074" +
    "\057\075\052\001\002\000\046\011\061\020\065\022\051" +
    "\025\062\030\055\032\063\033\060\034\053\040\067\051" +
    "\071\066\056\067\064\070\070\071\050\072\054\073\047" +
    "\074\057\075\052\001\002\000\046\011\061\020\065\022" +
    "\051\025\062\030\055\032\063\033\060\034\053\040\067" +
    "\051\071\066\056\067\064\070\070\071\050\072\054\073" +
    "\047\074\057\075\052\001\002\000\046\011\061\020\065" +
    "\022\051\025\062\030\055\032\063\033\060\034\053\040" +
    "\067\051\071\066\056\067\064\070\070\071\050\072\054" +
    "\073\047\074\057\075\052\001\002\000\046\011\061\020" +
    "\065\022\051\025\062\030\055\032\063\033\060\034\053" +
    "\040\067\051\071\066\056\067\064\070\070\071\050\072" +
    "\054\073\047\074\057\075\052\001\002\000\046\011\061" +
    "\020\065\022\051\025\062\030\055\032\063\033\060\034" +
    "\053\040\067\051\071\066\056\067\064\070\070\071\050" +
    "\072\054\073\047\074\057\075\052\001\002\000\046\011" +
    "\061\020\065\022\051\025\062\030\055\032\063\033\060" +
    "\034\053\040\067\051\071\066\056\067\064\070\070\071" +
    "\050\072\054\073\047\074\057\075\052\001\002\000\046" +
    "\011\061\020\065\022\051\025\062\030\055\032\063\033" +
    "\060\034\053\040\067\051\071\066\056\067\064\070\070" +
    "\071\050\072\054\073\047\074\057\075\052\001\002\000" +
    "\046\011\061\020\065\022\051\025\062\030\055\032\063" +
    "\033\060\034\053\040\067\051\071\066\056\067\064\070" +
    "\070\071\050\072\054\073\047\074\057\075\052\001\002" +
    "\000\004\066\130\001\002\000\046\011\061\020\065\022" +
    "\051\025\062\030\055\032\063\033\060\034\053\040\067" +
    "\051\071\066\056\067\064\070\070\071\050\072\054\073" +
    "\047\074\057\075\052\001\002\000\046\011\061\020\065" +
    "\022\051\025\062\030\055\032\063\033\060\034\053\040" +
    "\067\051\071\066\056\067\064\070\070\071\050\072\054" +
    "\073\047\074\057\075\052\001\002\000\046\011\061\020" +
    "\065\022\051\025\062\030\055\032\063\033\060\034\053" +
    "\040\067\051\071\066\056\067\064\070\070\071\050\072" +
    "\054\073\047\074\057\075\052\001\002\000\046\011\061" +
    "\020\065\022\051\025\062\030\055\032\063\033\060\034" +
    "\053\040\067\051\071\066\056\067\064\070\070\071\050" +
    "\072\054\073\047\074\057\075\052\001\002\000\046\011" +
    "\061\020\065\022\051\025\062\030\055\032\063\033\060" +
    "\034\053\040\067\051\071\066\056\067\064\070\070\071" +
    "\050\072\054\073\047\074\057\075\052\001\002\000\046" +
    "\011\061\020\065\022\051\025\062\030\055\032\063\033" +
    "\060\034\053\040\067\051\071\066\056\067\064\070\070" +
    "\071\050\072\054\073\047\074\057\075\052\001\002\000" +
    "\046\004\uffcb\005\uffcb\006\111\007\uffcb\010\uffcb\017\102" +
    "\020\116\022\113\023\105\024\107\026\uffcb\027\uffcb\031" +
    "\uffcb\035\uffcb\036\104\037\uffcb\044\uffcb\045\uffcb\001\002" +
    "\000\056\004\uffc5\005\uffc5\006\111\007\uffc5\010\uffc5\017" +
    "\uffc5\020\uffc5\022\113\023\105\024\107\026\uffc5\027\uffc5" +
    "\031\uffc5\035\uffc5\036\104\037\uffc5\040\uffc5\041\uffc5\042" +
    "\uffc5\043\uffc5\044\uffc5\045\uffc5\001\002\000\046\004\uffc9" +
    "\005\uffc9\006\111\007\uffc9\010\uffc9\017\102\020\116\022" +
    "\113\023\105\024\107\026\uffc9\027\uffc9\031\uffc9\035\uffc9" +
    "\036\104\037\uffc9\044\uffc9\045\uffc9\001\002\000\044\006" +
    "\111\007\124\010\114\017\102\020\116\022\113\023\105" +
    "\024\107\026\100\027\101\036\104\040\110\041\117\042" +
    "\112\043\115\044\103\045\106\001\002\000\046\011\061" +
    "\020\065\022\051\025\062\030\055\032\063\033\060\034" +
    "\053\040\067\051\071\066\056\067\064\070\070\071\050" +
    "\072\054\073\047\074\057\075\052\001\002\000\054\004" +
    "\uffb9\005\uffb9\006\111\007\uffb9\017\102\020\116\022\113" +
    "\023\105\024\107\026\100\027\101\031\uffb9\035\uffb9\036" +
    "\104\037\uffb9\040\110\041\117\042\112\043\115\044\103" +
    "\045\106\001\002\000\056\004\uffc4\005\uffc4\006\111\007" +
    "\uffc4\010\uffc4\017\uffc4\020\uffc4\022\uffc4\023\uffc4\024\uffc4" +
    "\026\uffc4\027\uffc4\031\uffc4\035\uffc4\036\104\037\uffc4\040" +
    "\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\001\002" +
    "\000\046\004\uffca\005\uffca\006\111\007\uffca\010\uffca\017" +
    "\102\020\116\022\113\023\105\024\107\026\uffca\027\uffca" +
    "\031\uffca\035\uffca\036\104\037\uffca\044\uffca\045\uffca\001" +
    "\002\000\056\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba" +
    "\017\uffba\020\uffba\022\uffba\023\uffba\024\uffba\026\uffba\027" +
    "\uffba\031\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\042\uffba\043\uffba\044\uffba\045\uffba\001\002\000\046\004" +
    "\uffcc\005\uffcc\006\111\007\uffcc\010\uffcc\017\102\020\116" +
    "\022\113\023\105\024\107\026\uffcc\027\uffcc\031\uffcc\035" +
    "\uffcc\036\104\037\uffcc\044\uffcc\045\uffcc\001\002\000\056" +
    "\004\uffc2\005\uffc2\006\111\007\uffc2\010\uffc2\017\uffc2\020" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\026\uffc2\027\uffc2\031\uffc2" +
    "\035\uffc2\036\104\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\001\002\000\052\004\uffcd\005\uffcd" +
    "\006\111\007\uffcd\010\uffcd\017\102\020\116\022\113\023" +
    "\105\024\107\026\uffcd\027\uffcd\031\uffcd\035\uffcd\036\104" +
    "\037\uffcd\040\110\041\117\042\112\043\115\001\002\000" +
    "\056\004\uffc3\005\uffc3\006\111\007\uffc3\010\uffc3\017\uffc3" +
    "\020\uffc3\022\uffc3\023\uffc3\024\uffc3\026\uffc3\027\uffc3\031" +
    "\uffc3\035\uffc3\036\104\037\uffc3\040\uffc3\041\uffc3\042\uffc3" +
    "\043\uffc3\044\uffc3\045\uffc3\001\002\000\044\006\111\010" +
    "\114\017\102\020\116\022\113\023\105\024\107\026\100" +
    "\027\101\036\104\037\136\040\110\041\117\042\112\043" +
    "\115\044\103\045\106\001\002\000\056\004\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\010\uffbb\017\uffbb\020\uffbb\022\uffbb\023" +
    "\uffbb\024\uffbb\026\uffbb\027\uffbb\031\uffbb\035\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045" +
    "\uffbb\001\002\000\052\004\uffce\005\uffce\006\111\007\uffce" +
    "\010\uffce\017\102\020\116\022\113\023\105\024\107\026" +
    "\uffce\027\uffce\031\uffce\035\uffce\036\104\037\uffce\040\110" +
    "\041\117\042\112\043\115\001\002\000\056\004\uffc6\005" +
    "\uffc6\006\111\007\uffc6\010\uffc6\017\uffc6\020\uffc6\022\113" +
    "\023\105\024\107\026\uffc6\027\uffc6\031\uffc6\035\uffc6\036" +
    "\104\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\001\002\000\056\004\uffc7\005\uffc7\006\111\007" +
    "\uffc7\010\uffc7\017\102\020\116\022\113\023\105\024\107" +
    "\026\uffc7\027\uffc7\031\uffc7\035\uffc7\036\104\037\uffc7\040" +
    "\110\041\117\042\112\043\115\044\103\045\106\001\002" +
    "\000\056\004\uffc8\005\uffc8\006\111\007\uffc8\010\uffc8\017" +
    "\102\020\116\022\113\023\105\024\107\026\uffc8\027\101" +
    "\031\uffc8\035\uffc8\036\104\037\uffc8\040\110\041\117\042" +
    "\112\043\115\044\103\045\106\001\002\000\044\005\144" +
    "\006\111\010\114\017\102\020\116\022\113\023\105\024" +
    "\107\026\100\027\101\036\104\040\110\041\117\042\112" +
    "\043\115\044\103\045\106\001\002\000\046\011\061\020" +
    "\065\022\051\025\062\030\055\032\063\033\060\034\053" +
    "\040\067\051\071\066\056\067\064\070\070\071\050\072" +
    "\054\073\047\074\057\075\052\001\002\000\042\006\111" +
    "\010\114\017\102\020\116\022\113\023\105\024\107\026" +
    "\100\027\101\036\104\040\110\041\146\042\112\043\115" +
    "\044\103\045\106\001\002\000\112\004\uffb4\005\uffb4\006" +
    "\uffb4\007\uffb4\010\uffb4\011\061\017\uffb4\020\065\022\051" +
    "\023\uffb4\024\uffb4\025\062\026\uffb4\027\uffb4\030\055\031" +
    "\uffb4\032\063\033\060\034\053\035\uffb4\036\uffb4\037\uffb4" +
    "\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\051\071\066" +
    "\056\067\064\070\070\071\050\072\054\073\047\074\057" +
    "\075\052\001\002\000\004\034\006\001\002\000\050\022" +
    "\uffd9\030\uffd9\035\uffd9\040\uffd9\046\uffd9\050\uffd9\052\uffd9" +
    "\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061" +
    "\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\001\002" +
    "\000\056\004\uffc1\005\uffc1\006\111\007\uffc1\010\uffc1\017" +
    "\uffc1\020\uffc1\022\113\023\105\024\107\026\uffc1\027\uffc1" +
    "\031\uffc1\035\uffc1\036\104\037\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\001\002\000\056\004\uffbd" +
    "\005\uffbd\006\111\007\uffbd\010\uffbd\017\uffbd\020\uffbd\022" +
    "\uffbd\023\uffbd\024\uffbd\026\uffbd\027\uffbd\031\uffbd\035\uffbd" +
    "\036\104\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044" +
    "\uffbd\045\uffbd\001\002\000\060\004\uffd5\005\uffd5\006\uffd5" +
    "\007\uffd5\010\uffd5\012\uffd5\017\uffd5\020\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\026\uffd5\027\uffd5\031\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045" +
    "\uffd5\001\002\000\056\004\uffbf\005\uffbf\006\156\007\uffbf" +
    "\010\uffbf\017\uffbf\020\uffbf\022\uffbf\023\uffbf\024\uffbf\026" +
    "\uffbf\027\uffbf\031\uffbf\035\uffbf\036\155\037\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\001\002\000" +
    "\046\011\061\020\065\022\051\025\062\030\055\032\063" +
    "\033\060\034\053\040\067\051\071\066\056\067\064\070" +
    "\070\071\050\072\054\073\047\074\057\075\052\001\002" +
    "\000\004\066\157\001\002\000\060\004\uffcf\005\uffcf\006" +
    "\uffcf\007\uffcf\010\uffcf\012\uffcf\017\uffcf\020\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\026\uffcf\027\uffcf\031\uffcf\035\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf" +
    "\045\uffcf\001\002\000\044\006\111\010\114\017\102\020" +
    "\116\022\113\023\105\024\107\026\100\027\101\036\104" +
    "\037\161\040\110\041\117\042\112\043\115\044\103\045" +
    "\106\001\002\000\060\004\uffd3\005\uffd3\006\uffd3\007\uffd3" +
    "\010\uffd3\012\uffd3\017\uffd3\020\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\026\uffd3\027\uffd3\031\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\001" +
    "\002\000\056\004\uffc0\005\uffc0\006\111\007\uffc0\010\uffc0" +
    "\017\uffc0\020\uffc0\022\uffc0\023\uffc0\024\uffc0\026\uffc0\027" +
    "\uffc0\031\uffc0\035\uffc0\036\104\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\045\uffc0\001\002\000\056\004" +
    "\uffbc\005\uffbc\006\111\007\uffbc\010\uffbc\017\uffbc\020\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\026\uffbc\027\uffbc\031\uffbc\035" +
    "\uffbc\036\104\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc" +
    "\044\uffbc\045\uffbc\001\002\000\050\011\061\020\065\022" +
    "\051\025\062\030\055\031\166\032\063\033\060\034\053" +
    "\040\067\051\071\066\056\067\064\070\070\071\050\072" +
    "\054\073\047\074\057\075\052\001\002\000\006\005\170" +
    "\031\171\001\002\000\056\004\uffb1\005\uffb1\006\uffb1\007" +
    "\uffb1\010\uffb1\017\uffb1\020\uffb1\022\uffb1\023\uffb1\024\uffb1" +
    "\026\uffb1\027\uffb1\031\uffb1\035\uffb1\036\uffb1\037\uffb1\040" +
    "\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\001\002" +
    "\000\050\005\uffd6\006\111\010\114\017\102\020\116\022" +
    "\113\023\105\024\107\026\100\027\101\031\uffd6\035\uffd6" +
    "\036\104\040\110\041\117\042\112\043\115\044\103\045" +
    "\106\001\002\000\046\011\061\020\065\022\051\025\062" +
    "\030\055\032\063\033\060\034\053\040\067\051\071\066" +
    "\056\067\064\070\070\071\050\072\054\073\047\074\057" +
    "\075\052\001\002\000\056\004\uffb2\005\uffb2\006\uffb2\007" +
    "\uffb2\010\uffb2\017\uffb2\020\uffb2\022\uffb2\023\uffb2\024\uffb2" +
    "\026\uffb2\027\uffb2\031\uffb2\035\uffb2\036\uffb2\037\uffb2\040" +
    "\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\001\002" +
    "\000\050\005\uffd7\006\111\010\114\017\102\020\116\022" +
    "\113\023\105\024\107\026\100\027\101\031\uffd7\035\uffd7" +
    "\036\104\040\110\041\117\042\112\043\115\044\103\045" +
    "\106\001\002\000\046\006\uffb3\010\uffb3\017\uffb3\020\uffb3" +
    "\022\uffb3\023\uffb3\024\uffb3\026\uffb3\027\uffb3\030\164\031" +
    "\201\036\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\045\uffb3\001\002\000\004\031\177\001\002\000\044\006" +
    "\111\010\114\017\102\020\116\022\113\023\105\024\107" +
    "\026\100\027\101\031\176\036\104\040\110\041\117\042" +
    "\112\043\115\044\103\045\106\001\002\000\056\004\uffb8" +
    "\005\uffb8\006\uffb8\007\uffb8\010\uffb8\017\uffb8\020\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\026\uffb8\027\uffb8\031\uffb8\035\uffb8" +
    "\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044" +
    "\uffb8\045\uffb8\001\002\000\046\011\061\020\065\022\051" +
    "\025\062\030\055\032\063\033\060\034\053\040\067\051" +
    "\071\066\056\067\064\070\070\071\050\072\054\073\047" +
    "\074\057\075\052\001\002\000\056\004\uffb6\005\uffb6\006" +
    "\111\007\uffb6\010\114\017\102\020\116\022\113\023\105" +
    "\024\107\026\100\027\101\031\uffb6\035\uffb6\036\104\037" +
    "\uffb6\040\110\041\117\042\112\043\115\044\103\045\106" +
    "\001\002\000\046\011\061\020\065\022\051\025\062\030" +
    "\055\032\063\033\060\034\053\040\067\051\071\066\056" +
    "\067\064\070\070\071\050\072\054\073\047\074\057\075" +
    "\052\001\002\000\056\004\uffb7\005\uffb7\006\111\007\uffb7" +
    "\010\114\017\102\020\116\022\113\023\105\024\107\026" +
    "\100\027\101\031\uffb7\035\uffb7\036\104\037\uffb7\040\110" +
    "\041\117\042\112\043\115\044\103\045\106\001\002\000" +
    "\006\005\170\035\204\001\002\000\056\004\uffb5\005\uffb5" +
    "\006\uffb5\007\uffb5\010\uffb5\017\uffb5\020\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\026\uffb5\027\uffb5\031\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045" +
    "\uffb5\001\002\000\056\004\uffbe\005\uffbe\006\111\007\uffbe" +
    "\010\uffbe\017\uffbe\020\uffbe\022\uffbe\023\uffbe\024\uffbe\026" +
    "\uffbe\027\uffbe\031\uffbe\035\uffbe\036\104\037\uffbe\040\uffbe" +
    "\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\001\002\000" +
    "\044\004\207\006\111\010\114\017\102\020\116\022\113" +
    "\023\105\024\107\026\100\027\101\036\104\040\110\041" +
    "\117\042\112\043\115\044\103\045\106\001\002\000\050" +
    "\022\uffdc\030\uffdc\035\uffdc\040\uffdc\046\uffdc\050\uffdc\052" +
    "\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc" +
    "\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\001" +
    "\002\000\020\005\uffed\022\uffed\030\uffed\034\211\036\uffed" +
    "\041\uffed\066\uffed\001\002\000\004\066\213\001\002\000" +
    "\006\005\215\035\216\001\002\000\006\005\ufffb\035\ufffb" +
    "\001\002\000\006\005\ufff9\035\ufff9\001\002\000\004\066" +
    "\213\001\002\000\016\005\uffef\022\uffef\030\uffef\036\uffef" +
    "\041\uffef\066\uffef\001\002\000\006\005\ufffa\035\ufffa\001" +
    "\002\000\046\011\061\020\065\022\051\025\062\030\055" +
    "\032\063\033\060\034\053\040\067\051\071\066\056\067" +
    "\064\070\070\071\050\072\054\073\047\074\057\075\052" +
    "\001\002\000\044\004\222\006\111\010\114\017\102\020" +
    "\116\022\113\023\105\024\107\026\100\027\101\036\104" +
    "\040\110\041\117\042\112\043\115\044\103\045\106\001" +
    "\002\000\050\022\uffdd\030\uffdd\035\uffdd\040\uffdd\046\uffdd" +
    "\050\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057" +
    "\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd" +
    "\066\uffdd\001\002\000\020\005\uffee\022\uffee\030\uffee\034" +
    "\224\036\uffee\041\uffee\066\uffee\001\002\000\026\040\040" +
    "\056\025\057\027\060\036\061\030\062\031\063\012\064" +
    "\016\065\037\066\042\001\002\000\010\022\234\030\235" +
    "\066\233\001\002\000\030\035\ufffc\040\ufffc\056\ufffc\057" +
    "\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc" +
    "\066\ufffc\001\002\000\030\035\231\040\040\056\025\057" +
    "\027\060\036\061\030\062\031\063\012\064\016\065\037" +
    "\066\042\001\002\000\030\035\ufffd\040\ufffd\056\ufffd\057" +
    "\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd" +
    "\066\ufffd\001\002\000\016\005\ufff0\022\ufff0\030\ufff0\036" +
    "\ufff0\041\ufff0\066\ufff0\001\002\000\006\004\243\036\240" +
    "\001\002\000\016\004\uffe9\005\uffe9\012\uffe9\030\uffe9\031" +
    "\uffe9\036\uffe9\001\002\000\010\022\234\030\235\066\233" +
    "\001\002\000\010\022\234\030\235\066\233\001\002\000" +
    "\006\031\237\036\240\001\002\000\016\004\uffe6\005\uffe6" +
    "\012\uffe6\030\uffe6\031\uffe6\036\uffe6\001\002\000\004\037" +
    "\241\001\002\000\016\004\uffe7\005\uffe7\012\uffe7\030\uffe7" +
    "\031\uffe7\036\uffe7\001\002\000\016\004\uffe8\005\uffe8\012" +
    "\uffe8\030\uffe8\031\uffe8\036\240\001\002\000\030\035\ufffe" +
    "\040\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\063" +
    "\ufffe\064\ufffe\065\ufffe\066\ufffe\001\002\000\010\022\234" +
    "\030\235\066\233\001\002\000\006\012\246\036\240\001" +
    "\002\000\046\011\061\020\065\022\051\025\062\030\055" +
    "\032\063\033\060\034\053\040\067\051\071\066\056\067" +
    "\064\070\070\071\050\072\054\073\047\074\057\075\052" +
    "\001\002\000\044\004\250\006\111\010\114\017\102\020" +
    "\116\022\113\023\105\024\107\026\100\027\101\036\104" +
    "\040\110\041\117\042\112\043\115\044\103\045\106\001" +
    "\002\000\050\022\uffdf\030\uffdf\035\uffdf\040\uffdf\046\uffdf" +
    "\050\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057" +
    "\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf" +
    "\066\uffdf\001\002\000\010\012\252\030\253\036\240\001" +
    "\002\000\046\011\061\020\065\022\051\025\062\030\055" +
    "\032\063\033\060\034\053\040\067\051\071\066\056\067" +
    "\064\070\070\071\050\072\054\073\047\074\057\075\052" +
    "\001\002\000\030\031\255\040\040\056\025\057\027\060" +
    "\036\061\030\062\031\063\012\064\016\065\037\066\042" +
    "\001\002\000\010\022\234\030\235\066\233\001\002\000" +
    "\004\034\006\001\002\000\006\005\257\031\260\001\002" +
    "\000\026\040\040\056\025\057\027\060\036\061\030\062" +
    "\031\063\012\064\016\065\037\066\042\001\002\000\004" +
    "\034\006\001\002\000\050\022\uffe2\030\uffe2\035\uffe2\040" +
    "\uffe2\046\uffe2\050\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2" +
    "\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064" +
    "\uffe2\065\uffe2\066\uffe2\001\002\000\010\022\234\030\235" +
    "\066\233\001\002\000\010\005\uffe5\031\uffe5\036\240\001" +
    "\002\000\050\022\uffe1\030\uffe1\035\uffe1\040\uffe1\046\uffe1" +
    "\050\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057" +
    "\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1" +
    "\066\uffe1\001\002\000\010\005\uffe4\031\uffe4\036\240\001" +
    "\002\000\044\004\267\006\111\010\114\017\102\020\116" +
    "\022\113\023\105\024\107\026\100\027\101\036\104\040" +
    "\110\041\117\042\112\043\115\044\103\045\106\001\002" +
    "\000\050\022\uffe3\030\uffe3\035\uffe3\040\uffe3\046\uffe3\050" +
    "\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3" +
    "\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066" +
    "\uffe3\001\002\000\046\011\061\020\065\022\051\025\062" +
    "\030\055\032\063\033\060\034\053\040\067\051\071\066" +
    "\056\067\064\070\070\071\050\072\054\073\047\074\057" +
    "\075\052\001\002\000\044\006\111\010\114\017\102\020" +
    "\116\022\113\023\105\024\107\026\100\027\101\031\272" +
    "\036\104\040\110\041\117\042\112\043\115\044\103\045" +
    "\106\001\002\000\004\034\006\001\002\000\052\022\uffda" +
    "\030\uffda\035\uffda\040\uffda\046\uffda\047\274\050\uffda\052" +
    "\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda" +
    "\061\uffda\062\uffda\063\uffda\064\uffda\065\uffda\066\uffda\001" +
    "\002\000\004\034\006\001\002\000\050\022\uffdb\030\uffdb" +
    "\035\uffdb\040\uffdb\046\uffdb\050\uffdb\052\uffdb\053\uffdb\054" +
    "\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb" +
    "\063\uffdb\064\uffdb\065\uffdb\066\uffdb\001\002\000\010\006" +
    "\uffd5\031\304\036\uffd5\001\002\000\010\006\156\031\303" +
    "\036\155\001\002\000\004\031\301\001\002\000\010\022" +
    "\013\030\020\066\153\001\002\000\060\004\uffd0\005\uffd0" +
    "\006\156\007\uffd0\010\uffd0\012\uffd0\017\uffd0\020\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\026\uffd0\027\uffd0\031\uffd0\035\uffd0" +
    "\036\155\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044" +
    "\uffd0\045\uffd0\001\002\000\060\004\uffd2\005\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\012\uffd2\017\uffd2\020\uffd2\022\uffd2\023" +
    "\uffd2\024\uffd2\026\uffd2\027\uffd2\031\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045" +
    "\uffd2\001\002\000\010\022\013\030\020\066\153\001\002" +
    "\000\060\004\uffd1\005\uffd1\006\156\007\uffd1\010\uffd1\012" +
    "\uffd1\017\uffd1\020\uffd1\022\uffd1\023\uffd1\024\uffd1\026\uffd1" +
    "\027\uffd1\031\uffd1\035\uffd1\036\155\037\uffd1\040\uffd1\041" +
    "\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\001\002\000\010" +
    "\022\234\030\235\066\233\001\002\000\006\004\310\036" +
    "\240\001\002\000\050\022\uffe0\030\uffe0\035\uffe0\040\uffe0" +
    "\046\uffe0\050\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056" +
    "\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0" +
    "\065\uffe0\066\uffe0\001\002\000\044\004\312\006\111\010" +
    "\114\017\102\020\116\022\113\023\105\024\107\026\100" +
    "\027\101\036\104\040\110\041\117\042\112\043\115\044" +
    "\103\045\106\001\002\000\050\022\uffd8\030\uffd8\035\uffd8" +
    "\040\uffd8\046\uffd8\050\uffd8\052\uffd8\053\uffd8\054\uffd8\055" +
    "\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8" +
    "\064\uffd8\065\uffd8\066\uffd8\001\002\000\060\004\uffd4\005" +
    "\uffd4\006\156\007\uffd4\010\uffd4\012\uffd4\017\uffd4\020\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\026\uffd4\027\uffd4\031\uffd4\035" +
    "\uffd4\036\155\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4" +
    "\044\uffd4\045\uffd4\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\006\001\001\000\004\004\007\001\001\000\002" +
    "\001\001\000\014\005\010\006\016\016\022\017\032\021" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\312\001\001\000\004\020\310\001\001\000\006\016" +
    "\305\017\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\277\021\276\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\250\001\001\000\006\016\243" +
    "\017\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\040\017\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\043\017\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\204\001\001\000\002" +
    "\001\001\000\006\007\202\020\166\001\001\000\002\001" +
    "\001\000\006\017\173\020\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\162\001\001\000\004\020" +
    "\161\001\001\000\004\021\153\001\001\000\004\020\151" +
    "\001\001\000\002\001\001\000\004\020\150\001\001\000" +
    "\002\001\001\000\004\020\142\001\001\000\002\001\001" +
    "\000\006\016\071\017\032\001\001\000\002\001\001\000" +
    "\004\020\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\141\001" +
    "\001\000\004\020\140\001\001\000\004\020\137\001\001" +
    "\000\004\020\136\001\001\000\004\020\134\001\001\000" +
    "\004\020\133\001\001\000\004\020\132\001\001\000\004" +
    "\020\131\001\001\000\004\020\130\001\001\000\002\001" +
    "\001\000\004\020\126\001\001\000\004\020\125\001\001" +
    "\000\004\020\122\001\001\000\004\020\121\001\001\000" +
    "\004\020\120\001\001\000\004\020\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\144\001\001\000\002\001\001\000" +
    "\004\020\117\001\001\000\004\003\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\164" +
    "\020\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\177\001\001" +
    "\000\002\001\001\000\004\020\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\211\013\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\010\226\011\225\016\224\017\032\001\001\000\004" +
    "\015\231\001\001\000\002\001\001\000\010\011\227\016" +
    "\224\017\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\241\001" +
    "\001\000\004\015\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\244\001\001\000\002" +
    "\001\001\000\004\020\246\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\265\001\001" +
    "\000\010\014\255\016\253\017\032\001\001\000\004\015" +
    "\264\001\001\000\004\003\263\001\001\000\002\001\001" +
    "\000\006\016\261\017\032\001\001\000\004\003\260\001" +
    "\001\000\002\001\001\000\004\015\262\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\270\001\001\000\002" +
    "\001\001\000\004\003\272\001\001\000\002\001\001\000" +
    "\004\003\274\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\301\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\304" +
    "\001\001\000\002\001\001\000\004\015\306\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File(this.name);
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2
 return lexer.next_token(); 
    }

//@@CUPDBG0

	protected Lexer lexer;
	protected String name;
	public Parser(String _name) {
		this();
		this.name = _name;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= UL_Identificateur Bloc 
            {
              Block RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location blocxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blocxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block bloc = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG3
 
				System.out.println( "Block named : " + nom );
				System.out.println( bloc ); 
				SymbolTable tds = new SymbolTable();
				if (bloc.collect(tds)) {
					System.out.println("Collect succeeded : " + tds);
					if (bloc.resolve(tds)) {
						System.out.println("Resolve succeeded.");
					} else {
						System.out.println("Resolve failed." + tds);
					}
				} else {
					System.out.println("Collect failed : " + tds);
				}

				//Tester le checkType
				if (bloc.checkType()) {
          System.out.println("Check type succeeded.");
          bloc.allocateMemory( Register.SB, 0);
          Fragment code = bloc.getCode(new TAMFactoryImpl());
          TAMFactoryImpl factory = new TAMFactoryImpl();
          code.add(factory.createHalt());
          for (Instruction fct : Block.fonctions) {
            code.append(fct.getCode(new TAMFactoryImpl()));
          }
          //Generation de code
          System.out.println( "Generated code:" );
          System.out.println( code );
          //Fichier TAM qui contient le code
          File file = new File(parser.name.replaceAll("txt", "tam"));
          PrintStream printer = null;
          try {
            printer = new PrintStream( new FileOutputStream(file) );
            printer.println( code );
          } catch (IOException e) {
            e.printStackTrace();
          } 
				} else {
					System.out.println("Check type failed.");
				}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Block start_val = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Bloc ::= UL_Accolade_Ouvrante Instructions UL_Accolade_Fermante 
            {
              Block RESULT =null;
		Location instructionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location instructionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG4
 
				RESULT = new Block( instructions ); 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloc",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Champ ::= Type Identifiant UL_Point_Virgule 
            {
              FieldDeclaration RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG5
 
				Type _type = identifiant.getRight();
				if (_type == null) {
					_type = type;
				} else {
					_type = ((PartialType)_type).complete( type );
 				}
				RESULT = new FieldDeclaration( identifiant.getLeft(), _type);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Champ",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Champs ::= Champs Champ 
            {
              List<FieldDeclaration> RESULT =null;
		Location champsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location champsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<FieldDeclaration> champs = (List<FieldDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location champxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location champxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		FieldDeclaration champ = (FieldDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG6
 
				champs.add(champ); 
				RESULT = champs; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Champs",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Champs ::= Champ 
            {
              List<FieldDeclaration> RESULT =null;
		Location champxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location champxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		FieldDeclaration champ = (FieldDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG7
 
				List<FieldDeclaration> _champs = new LinkedList<FieldDeclaration>(); 
				_champs.add(champ); 
				RESULT = _champs; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Champs",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Etiquette ::= UL_Identificateur 
            {
              LabelDeclaration RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG8
 
					RESULT = new LabelDeclaration( nom ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Etiquette",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Etiquettes ::= Etiquettes UL_Virgule Etiquette 
            {
              List<LabelDeclaration> RESULT =null;
		Location etiquettesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location etiquettesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<LabelDeclaration> etiquettes = (List<LabelDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location etiquettexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etiquettexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		LabelDeclaration etiquette = (LabelDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG9
 
				etiquettes.add(etiquette); 
				RESULT = etiquettes; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Etiquettes",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Etiquettes ::= Etiquette 
            {
              List<LabelDeclaration> RESULT =null;
		Location etiquettexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etiquettexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		LabelDeclaration etiquette = (LabelDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG10
 
				List<LabelDeclaration> _etiquettes = new LinkedList<LabelDeclaration>(); 
				_etiquettes.add(etiquette); 
				RESULT = _etiquettes; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Etiquettes",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Atomique ::= UL_Type_Booleen 
            {
              Type RESULT =null;
		//@@CUPDBG11
 
				RESULT = AtomicType.BooleanType; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Atomique ::= UL_Type_Caractere 
            {
              Type RESULT =null;
		//@@CUPDBG12
 
				RESULT = AtomicType.CharacterType; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Atomique ::= UL_Type_Chaine 
            {
              Type RESULT =null;
		//@@CUPDBG13
 
				RESULT = AtomicType.StringType; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Atomique ::= UL_Type_Entier 
            {
              Type RESULT =null;
		//@@CUPDBG14
 
				RESULT = AtomicType.IntegerType; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Atomique ::= UL_Type_Flottant 
            {
              Type RESULT =null;
		//@@CUPDBG15
 
				RESULT = AtomicType.FloatingType; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Atomique ::= UL_Type_Vide 
            {
              Type RESULT =null;
		//@@CUPDBG16
 
				RESULT = AtomicType.VoidType; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= Atomique 
            {
              Type RESULT =null;
		Location atomiquexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location atomiquexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type atomique = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG17
 
				RESULT = atomique; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= UL_Identificateur 
            {
              Type RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG18
 
				RESULT = new NamedType( nom ); 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= UL_Enregistrement UL_Identificateur UL_Accolade_Ouvrante Champs UL_Accolade_Fermante 
            {
              Type RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location champsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location champsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<FieldDeclaration> champs = (List<FieldDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG19
 
				RESULT = new RecordType( nom, champs ); 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= UL_Enumeration UL_Identificateur UL_Accolade_Ouvrante Etiquettes UL_Accolade_Fermante 
            {
              Type RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location etiquettesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location etiquettesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<LabelDeclaration> etiquettes = (List<LabelDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG20
 
				RESULT = new EnumerationType( nom, etiquettes ); 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= UL_Enregistrement UL_Identificateur 
            {
              Type RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG21
 
				RESULT = new NamedType( nom ); 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= UL_Enumeration UL_Identificateur 
            {
              Type RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG22
 
				RESULT = new NamedType( nom ); 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= UL_Inferieur Type UL_Virgule Type UL_Superieur 
            {
              Type RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Type gauche = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location droitxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location droitxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type droit = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG23

				RESULT = new CoupleType( gauche, droit );
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Instructions ::= Instructions Instruction 
            {
              List<Instruction> RESULT =null;
		Location instructionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location instructionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location instructionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location instructionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG24

					instructions.add( instruction );
					RESULT = instructions; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instructions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Instructions ::= 
            {
              List<Instruction> RESULT =null;
		//@@CUPDBG25
 RESULT = new LinkedList<Instruction>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instructions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Identifiant ::= UL_Identificateur 
            {
              Pair<String,PartialType> RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG26
 
					RESULT = new Pair<String,PartialType>( nom, null ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifiant",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Identifiant ::= UL_Asterisque Identifiant 
            {
              Pair<String,PartialType> RESULT =null;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG27

					if (identifiant.getRight() == null) {
						identifiant.setRight( new PartialPointerType() );
					} else {
						identifiant.getRight().enrich(new PartialPointerType());
					}
					RESULT = identifiant;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifiant",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Identifiant ::= Identifiant UL_Crochet_Ouvrant UL_Crochet_Fermant 
            {
              Pair<String,PartialType> RESULT =null;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG28

					if (identifiant.getRight() == null) {
						identifiant.setRight( new PartialArrayType() );
					} else {
						identifiant.getRight().enrich(new PartialArrayType());
					}
					RESULT = identifiant;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifiant",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Identifiant ::= UL_Parenthese_Ouvrante Identifiant UL_Parenthese_Fermante 
            {
              Pair<String,PartialType> RESULT =null;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG29

					RESULT = identifiant;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifiant",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Parameters ::= Parameters UL_Virgule Type Identifiant 
            {
              List<ParameterDeclaration> RESULT =null;
		Location parametersxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location parametersxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<ParameterDeclaration> parameters = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG30

					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					parameters.add( new ParameterDeclaration( identifiant.getLeft(), _type) );
					RESULT = parameters;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Parameters ::= Type Identifiant 
            {
              List<ParameterDeclaration> RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG31

					List<ParameterDeclaration> _parameters = new LinkedList<ParameterDeclaration>();
					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					_parameters.add( new ParameterDeclaration( identifiant.getLeft(), _type) );
					RESULT = _parameters;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Declaration ::= Type Identifiant UL_Egal Expression UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location valeurxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valeurxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression valeur = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG32

					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					RESULT = new VariableDeclaration( identifiant.getLeft(), _type, valeur);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Declaration ::= Type Identifiant UL_Parenthese_Ouvrante Parameters UL_Parenthese_Fermante Bloc 
            {
              Instruction RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<ParameterDeclaration> parametres = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location corpsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location corpsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block corps = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG33

					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					RESULT = new FunctionDeclaration( identifiant.getLeft(), _type, parametres, corps);
 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Declaration ::= Type Identifiant UL_Parenthese_Ouvrante UL_Parenthese_Fermante Bloc 
            {
              Instruction RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location corpsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location corpsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block corps = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG34

					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					List<ParameterDeclaration> _parametres = new LinkedList<ParameterDeclaration>();
					RESULT = new FunctionDeclaration( identifiant.getLeft(), _type, _parametres, corps);
 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Declaration ::= UL_Definition_Type Type Identifiant UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG35

					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					RESULT = new TypeDeclaration( identifiant.getLeft(), _type); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Declaration ::= UL_Definition_Constante Type Identifiant UL_Egal Expression UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location valeurxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valeurxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression valeur = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG36
 
					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					RESULT = new ConstantDeclaration( identifiant.getLeft(), _type, valeur); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Instruction ::= Declaration 
            {
              Instruction RESULT =null;
		Location declarationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declarationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Instruction declaration = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG37
 
					RESULT = declaration; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Instruction ::= Affectable UL_Egal Expression UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG38

					RESULT = new Assignment( affectable, expression);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Instruction ::= UL_Afficher Expression UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG39

					RESULT = new Printer( expression );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instruction ::= UL_Si UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante Bloc UL_Sinon Bloc 
            {
              Instruction RESULT =null;
		Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location alorsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location alorsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Block alors = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sinonxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sinonxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block sinon = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG40
 
					RESULT = new Conditional( condition, alors, sinon); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Instruction ::= UL_Si UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante Bloc 
            {
              Instruction RESULT =null;
		Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location alorsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location alorsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block alors = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG41
 
					RESULT = new Conditional( condition, alors, null); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Instruction ::= UL_Tant_Que UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante Bloc 
            {
              Instruction RESULT =null;
		Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location corpsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location corpsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block corps = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG42
 
					RESULT = new Repetition( condition, corps); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Instruction ::= UL_Retour Expression UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG43

					RESULT = new Return( expression);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expressions ::= Expressions UL_Virgule Expression 
            {
              List<Expression> RESULT =null;
		Location expressionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expressionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Expression> expressions = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG44

					expressions.add( expression );
					RESULT = expressions; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expressions",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expressions ::= Expression 
            {
              List<Expression> RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG45
 
					List<Expression> _expressions = new LinkedList<Expression>();
					_expressions.add( expression );
					RESULT = _expressions;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expressions",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Affectable ::= UL_Identificateur 
            {
              AssignableExpression RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG46

					RESULT = new VariableAssignment( nom );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Affectable ::= UL_Asterisque Affectable 
            {
              AssignableExpression RESULT =null;
		Location pointeurxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pointeurxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		AssignableExpression pointeur = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG47

					RESULT = new PointerAssignment( pointeur );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Affectable ::= Affectable UL_Crochet_Ouvrant Expression UL_Crochet_Fermant 
            {
              AssignableExpression RESULT =null;
		Location tableauxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location tableauxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		AssignableExpression tableau = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location indicexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location indicexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression indice = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG48

					RESULT = new ArrayAssignment( tableau, indice);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Affectable ::= UL_Parenthese_Ouvrante Affectable UL_Parenthese_Fermante 
            {
              AssignableExpression RESULT =null;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG49

					RESULT = affectable;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Affectable ::= UL_Parenthese_Ouvrante UL_Identificateur UL_Parenthese_Fermante Affectable 
            {
              AssignableExpression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG50
 
					RESULT = new AssignableConversion( affectable, type); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Affectable ::= UL_Parenthese_Ouvrante Atomique UL_Parenthese_Fermante Affectable 
            {
              AssignableExpression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG51
 
					RESULT = new AssignableConversion( affectable, type); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Affectable ::= Affectable UL_Point UL_Identificateur 
            {
              AssignableExpression RESULT =null;
		Location enregistrementxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location enregistrementxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		AssignableExpression enregistrement = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location etiquettexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etiquettexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String etiquette = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG52

					RESULT = new FieldAssignment( enregistrement, etiquette);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expression ::= Expression UL_Double_Egal Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG53
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Equals, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expression ::= Expression UL_Exclamation_Egal Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG54
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Different, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expression ::= Expression UL_Inferieur Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG55
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Lesser, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expression ::= Expression UL_Superieur Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG56
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Greater, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expression ::= Expression UL_Inferieur_Egal Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG57
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.LesserOrEqual, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expression ::= Expression UL_Superieur_Egal Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG58
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.GreaterOrEqual, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expression ::= Expression UL_Double_Barre Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG59
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Or, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expression ::= Expression UL_Double_Esperluette Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG60
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.And, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expression ::= Expression UL_Plus Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG61
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Add, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expression ::= Expression UL_Moins Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG62
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Substract, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expression ::= Expression UL_Asterisque Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG63
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Multiply, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expression ::= Expression UL_Oblique Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG64
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Divide, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expression ::= Expression UL_Pour_Cent Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG65
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Modulo, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expression ::= UL_Moins Expression 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG66
 
					RESULT = new UnaryExpression( UnaryOperator.Opposite, expression); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expression ::= UL_Point_Exclamation Expression 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG67
 
					RESULT = new UnaryExpression( UnaryOperator.Negate, expression); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expression ::= UL_Esperluette Affectable 
            {
              Expression RESULT =null;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG68
 
					RESULT = new AddressAccess( affectable ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expression ::= UL_Asterisque Expression 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG69
 
					RESULT = new PointerAccess( expression ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expression ::= UL_Premier Expression 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG70
 
					RESULT = new First( expression ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expression ::= UL_Second Expression 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG71
 
					RESULT = new Second( expression ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expression ::= Expression UL_Crochet_Ouvrant Expression UL_Crochet_Fermant 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location indicexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location indicexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression indice = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG72

					RESULT = new ArrayAccess( expression, indice );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expression ::= Expression UL_Point UL_Identificateur 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location etiquettexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etiquettexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String etiquette = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG73

					RESULT = new FieldAccess( expression, etiquette );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expression ::= Expression UL_Point_Interrogation Expression UL_Deux_Points Expression 
            {
              Expression RESULT =null;
		Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location alorsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location alorsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression alors = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sinonxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sinonxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression sinon = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG74

					RESULT = new ConditionalExpression( condition, alors, sinon);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expression ::= UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG75
 
					RESULT = expression; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expression ::= UL_Parenthese_Ouvrante UL_Identificateur UL_Parenthese_Fermante Expression 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG76
 
					RESULT = new AccessibleConversion( expression, type); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expression ::= UL_Parenthese_Ouvrante Atomique UL_Parenthese_Fermante Expression 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG77
 
					RESULT = new AccessibleConversion( expression, type); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expression ::= UL_Accolade_Ouvrante Expressions UL_Accolade_Fermante 
            {
              Expression RESULT =null;
		Location expressionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expressionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> expressions = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG78
 
					RESULT = new Sequence( expressions ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expression ::= UL_Inferieur Expression UL_Virgule Expression UL_Superieur 
            {
              Expression RESULT =null;
		Location premierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location premierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Expression premier = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location secondxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location secondxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression second = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG79
 
					RESULT = new Couple( premier, second ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expression ::= UL_Identificateur 
            {
              Expression RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG80
 
					RESULT = new IdentifierAccess( nom ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expression ::= UL_Identificateur UL_Parenthese_Ouvrante Expressions UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> parametres = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG81
 
					RESULT = new FunctionCall( nom, parametres ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expression ::= UL_Identificateur UL_Parenthese_Ouvrante UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG82

					List<Expression> _parametres = new LinkedList<Expression>();
					RESULT = new FunctionCall( nom, _parametres ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expression ::= UL_Nombre_Entier 
            {
              Expression RESULT =null;
		Location entierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location entierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String entier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG83
 
					RESULT = new IntegerValue( entier ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expression ::= UL_Vrai 
            {
              Expression RESULT =null;
		//@@CUPDBG84
 
					RESULT = BooleanValue.True; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expression ::= UL_Faux 
            {
              Expression RESULT =null;
		//@@CUPDBG85
 
					RESULT = BooleanValue.False; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expression ::= UL_Nul 
            {
              Expression RESULT =null;
		//@@CUPDBG86
 
					RESULT = NullValue.Null; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expression ::= UL_Nombre_Flottant 
            {
              Expression RESULT =null;
		Location flottantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location flottantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String flottant = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG87
 
					RESULT = new FloatingValue( flottant ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expression ::= UL_Caractere 
            {
              Expression RESULT =null;
		Location caracterexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location caracterexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String caractere = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG88
 
					RESULT = new CharacterValue( caractere ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expression ::= UL_Chaine 
            {
              Expression RESULT =null;
		Location chainexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location chainexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String chaine = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG89
 
					RESULT = new StringValue( chaine ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expression ::= UL_Nouveau Type UL_Crochet_Ouvrant Expression UL_Crochet_Fermant 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location taillexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location taillexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression taille = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG90
 
					RESULT = new ArrayAllocation( type, taille ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expression ::= UL_Nouveau Type UL_Parenthese_Ouvrante UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG91
 
					RESULT = new PointerAllocation( type ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
