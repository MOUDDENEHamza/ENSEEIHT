
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package fr.n7.stl.block;

import java_cup.runtime.*;
import fr.n7.stl.block.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.*;
import fr.n7.stl.block.ast.*;
import fr.n7.stl.block.ast.classElement.*;
import fr.n7.stl.block.ast.element.*;
import fr.n7.stl.block.ast.expression.*;
import fr.n7.stl.block.ast.expression.accessible.*;
import fr.n7.stl.block.ast.expression.allocation.*;
import fr.n7.stl.block.ast.expression.assignable.*;
import fr.n7.stl.block.ast.expression.value.*;
import fr.n7.stl.block.ast.instruction.*;
import fr.n7.stl.block.ast.instruction.declaration.*;
import fr.n7.stl.block.ast.scope.*;
import fr.n7.stl.block.ast.type.*;
import fr.n7.stl.block.ast.type.declaration.*;
import fr.n7.stl.util.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\002\003\000\002\002\004\000\002\022" +
    "\003\000\002\022\004\000\002\022\004\000\002\022\005" +
    "\000\002\022\005\000\002\025\011\000\002\024\012\000" +
    "\002\023\017\000\002\026\002\000\002\026\005\000\002" +
    "\027\003\000\002\027\005\000\002\031\003\000\002\031" +
    "\005\000\002\030\003\000\002\030\005\000\002\032\002" +
    "\000\002\032\004\000\002\033\002\000\002\033\004\000" +
    "\002\034\002\000\002\034\004\000\002\037\005\000\002" +
    "\037\003\000\002\040\003\000\002\040\006\000\002\035" +
    "\002\000\002\035\005\000\002\036\002\000\002\036\004" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\051\003\000\002\051\002\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\042\004\000\002\043" +
    "\005\000\002\043\010\000\002\043\011\000\002\045\004" +
    "\000\002\045\005\000\002\045\005\000\002\045\006\000" +
    "\002\045\005\000\002\044\007\000\002\044\006\000\002" +
    "\046\007\000\002\046\006\000\002\003\005\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\016\003\000" +
    "\002\016\003\000\002\004\004\000\002\004\002\000\002" +
    "\015\003\000\002\015\005\000\002\014\006\000\002\014" +
    "\004\000\002\006\007\000\002\005\003\000\002\005\006" +
    "\000\002\005\004\000\002\005\005\000\002\005\011\000" +
    "\002\005\007\000\002\005\007\000\002\005\005\000\002" +
    "\007\005\000\002\007\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\006\000\002\021\005" +
    "\000\002\021\006\000\002\021\006\000\002\021\005\000" +
    "\002\021\005\000\002\021\006\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\004\000\002" +
    "\020\004\000\002\020\006\000\002\020\005\000\002\020" +
    "\007\000\002\020\005\000\002\020\006\000\002\020\006" +
    "\000\002\020\003\000\002\020\006\000\002\020\005\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\007" +
    "\000\002\020\006\000\002\020\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\014\004\007\005\015\010\006\013\013\014" +
    "\011\001\002\000\004\002\001\001\002\000\014\004\007" +
    "\005\015\010\006\013\013\014\011\001\002\000\004\004" +
    "\u0100\001\002\000\004\104\111\001\002\000\004\002\110" +
    "\001\002\000\004\004\007\001\002\000\014\004\007\005" +
    "\015\010\006\013\013\014\011\001\002\000\004\004\007" +
    "\001\002\000\004\002\uffff\001\002\000\004\104\016\001" +
    "\002\000\010\006\ufff7\052\ufff7\056\017\001\002\000\004" +
    "\104\072\001\002\000\006\006\022\052\uffed\001\002\000" +
    "\004\052\033\001\002\000\004\104\024\001\002\000\012" +
    "\023\026\052\uffe8\056\027\057\uffe8\001\002\000\024\007" +
    "\uffe7\023\uffe7\043\uffe7\046\uffe7\052\uffe7\054\uffe7\056\uffe7" +
    "\057\uffe7\104\uffe7\001\002\000\004\052\uffec\001\002\000" +
    "\004\104\024\001\002\000\004\104\024\001\002\000\004" +
    "\057\031\001\002\000\024\007\uffe6\023\uffe6\043\uffe6\046" +
    "\uffe6\052\uffe6\054\uffe6\056\uffe6\057\uffe6\104\uffe6\001\002" +
    "\000\006\052\uffe9\057\uffe9\001\002\000\022\053\uffe3\076" +
    "\045\077\041\100\046\101\042\102\037\103\043\104\024" +
    "\001\002\000\004\104\054\001\002\000\004\053\052\001" +
    "\002\000\004\022\051\001\002\000\012\046\uffc7\047\uffc7" +
    "\054\uffc7\104\uffc7\001\002\000\022\053\uffe3\076\045\077" +
    "\041\100\046\101\042\102\037\103\043\104\024\001\002" +
    "\000\012\046\uffca\047\uffca\054\uffca\104\uffca\001\002\000" +
    "\012\046\uffc8\047\uffc8\054\uffc8\104\uffc8\001\002\000\012" +
    "\046\uffc6\047\uffc6\054\uffc6\104\uffc6\001\002\000\012\046" +
    "\uffc4\054\uffc4\056\027\104\uffc4\001\002\000\012\046\uffcb" +
    "\047\uffcb\054\uffcb\104\uffcb\001\002\000\012\046\uffc9\047" +
    "\uffc9\054\uffc9\104\uffc9\001\002\000\010\046\uffc5\054\uffc5" +
    "\104\uffc5\001\002\000\004\053\uffe2\001\002\000\022\053" +
    "\uffd9\076\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9\103\uffd9" +
    "\104\uffd9\001\002\000\014\004\ufffa\005\ufffa\010\ufffa\013" +
    "\ufffa\014\ufffa\001\002\000\006\046\056\054\055\001\002" +
    "\000\016\022\uffc1\023\uffc1\030\uffc1\046\uffc1\047\uffc1\054" +
    "\uffc1\001\002\000\004\055\067\001\002\000\022\047\060" +
    "\076\045\077\041\100\046\101\042\102\037\103\043\104" +
    "\024\001\002\000\004\104\054\001\002\000\006\022\uffcf" +
    "\052\uffcf\001\002\000\006\023\062\047\063\001\002\000" +
    "\020\076\045\077\041\100\046\101\042\102\037\103\043" +
    "\104\024\001\002\000\006\022\uffd0\052\uffd0\001\002\000" +
    "\004\104\054\001\002\000\010\023\uffbf\047\uffbf\054\055" +
    "\001\002\000\010\023\uffbe\047\uffbe\054\055\001\002\000" +
    "\016\022\uffc0\023\uffc0\030\uffc0\046\uffc0\047\uffc0\054\uffc0" +
    "\001\002\000\006\023\101\057\ufff1\001\002\000\004\057" +
    "\100\001\002\000\010\006\073\023\ufff5\057\ufff5\001\002" +
    "\000\004\104\024\001\002\000\012\023\ufff3\043\076\056" +
    "\027\057\ufff3\001\002\000\006\023\ufff4\057\ufff4\001\002" +
    "\000\004\104\024\001\002\000\006\023\ufff2\057\ufff2\001" +
    "\002\000\010\006\ufff6\007\ufff6\052\ufff6\001\002\000\004" +
    "\104\072\001\002\000\004\057\ufff0\001\002\000\014\004" +
    "\007\005\015\010\006\013\013\014\011\001\002\000\004" +
    "\002\ufffb\001\002\000\004\002\ufffe\001\002\000\014\004" +
    "\007\005\015\010\006\013\013\014\011\001\002\000\004" +
    "\002\ufffc\001\002\000\004\002\000\001\002\000\012\006" +
    "\ufff7\007\ufff7\052\ufff7\056\017\001\002\000\010\006\114" +
    "\007\uffef\052\uffef\001\002\000\006\007\117\052\uffeb\001" +
    "\002\000\004\104\024\001\002\000\010\007\uffee\052\uffee" +
    "\056\027\001\002\000\004\052\121\001\002\000\004\104" +
    "\024\001\002\000\004\052\uffea\001\002\000\012\010\122" +
    "\011\124\012\123\053\uffe5\001\002\000\026\013\uffe1\014" +
    "\uffe1\015\uffe1\076\uffe1\077\uffe1\100\uffe1\101\uffe1\102\uffe1" +
    "\103\uffe1\104\uffe1\001\002\000\026\013\uffe0\014\uffe0\015" +
    "\uffe0\076\uffe0\077\uffe0\100\uffe0\101\uffe0\102\uffe0\103\uffe0" +
    "\104\uffe0\001\002\000\026\013\uffdf\014\uffdf\015\uffdf\076" +
    "\uffdf\077\uffdf\100\uffdf\101\uffdf\102\uffdf\103\uffdf\104\uffdf" +
    "\001\002\000\026\013\132\014\131\015\134\076\045\077" +
    "\041\100\046\101\042\102\037\103\043\104\135\001\002" +
    "\000\004\053\127\001\002\000\014\004\ufff9\005\ufff9\010" +
    "\ufff9\013\ufff9\014\ufff9\001\002\000\012\010\uffdb\011\uffdb" +
    "\012\uffdb\053\uffdb\001\002\000\020\076\045\077\041\100" +
    "\046\101\042\102\037\103\043\104\024\001\002\000\020" +
    "\076\045\077\041\100\046\101\042\102\037\103\043\104" +
    "\024\001\002\000\012\010\uffdc\011\uffdc\012\uffdc\053\uffdc" +
    "\001\002\000\022\013\357\076\045\077\041\100\046\101" +
    "\042\102\037\103\043\104\024\001\002\000\010\046\347" +
    "\056\uffe7\104\uffe7\001\002\000\004\104\054\001\002\000" +
    "\012\010\uffda\011\uffda\012\uffda\053\uffda\001\002\000\012" +
    "\010\122\011\124\012\123\053\uffe5\001\002\000\004\052" +
    "\143\001\002\000\012\010\uffd5\011\uffd5\012\uffd5\053\uffd5" +
    "\001\002\000\040\020\uffc2\021\uffc2\046\uffc2\053\uffc2\064" +
    "\uffc2\066\uffc2\070\uffc2\071\uffc2\076\uffc2\077\uffc2\100\uffc2" +
    "\101\uffc2\102\uffc2\103\uffc2\104\uffc2\001\002\000\040\020" +
    "\156\021\147\046\151\053\157\064\152\066\161\070\160" +
    "\071\146\076\045\077\041\100\046\101\042\102\037\103" +
    "\043\104\153\001\002\000\040\020\uffc3\021\uffc3\046\uffc3" +
    "\053\uffc3\064\uffc3\066\uffc3\070\uffc3\071\uffc3\076\uffc3\077" +
    "\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3\001\002" +
    "\000\036\020\167\021\175\027\163\036\200\046\201\067" +
    "\172\104\174\105\164\106\176\107\177\110\171\111\170" +
    "\112\166\113\165\001\002\000\016\022\uffb0\024\uffb0\030" +
    "\uffb0\046\uffb0\047\uffb0\054\uffb0\001\002\000\040\020\uffbc" +
    "\021\uffbc\046\uffbc\053\uffbc\064\uffbc\066\uffbc\070\uffbc\071" +
    "\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc" +
    "\104\uffbc\001\002\000\026\020\156\021\147\046\151\076" +
    "\045\077\041\100\046\101\042\102\037\103\043\104\331" +
    "\001\002\000\004\046\323\001\002\000\020\022\uffb2\024" +
    "\uffb2\030\uffb2\046\uffb2\054\uffb2\056\uffe7\104\uffe7\001\002" +
    "\000\004\104\054\001\002\000\014\022\303\024\306\030" +
    "\302\046\305\054\304\001\002\000\016\022\uffb1\024\uffb1" +
    "\030\uffb1\046\uffb1\047\uffb1\054\uffb1\001\002\000\050\010" +
    "\uffcc\011\uffcc\012\uffcc\020\uffcc\021\uffcc\046\uffcc\053\uffcc" +
    "\064\uffcc\065\uffcc\066\uffcc\070\uffcc\071\uffcc\076\uffcc\077" +
    "\uffcc\100\uffcc\101\uffcc\102\uffcc\103\uffcc\104\uffcc\001\002" +
    "\000\036\020\167\021\175\027\163\036\200\046\201\067" +
    "\172\104\174\105\164\106\176\107\177\110\171\111\170" +
    "\112\166\113\165\001\002\000\004\046\162\001\002\000" +
    "\036\020\167\021\175\027\163\036\200\046\201\067\172" +
    "\104\174\105\164\106\176\107\177\110\171\111\170\112" +
    "\166\113\165\001\002\000\036\020\167\021\175\027\163" +
    "\036\200\046\201\067\172\104\174\105\164\106\176\107" +
    "\177\110\171\111\170\112\166\113\165\001\002\000\056" +
    "\022\uff88\023\uff88\024\uff88\025\uff88\026\uff88\035\uff88\036" +
    "\uff88\040\uff88\041\uff88\042\uff88\044\uff88\045\uff88\046\uff88" +
    "\047\uff88\054\uff88\055\uff88\056\uff88\057\uff88\060\uff88\061" +
    "\uff88\062\uff88\063\uff88\001\002\000\056\022\uff8e\023\uff8e" +
    "\024\uff8e\025\uff8e\026\uff8e\035\uff8e\036\uff8e\040\uff8e\041" +
    "\uff8e\042\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\054\uff8e" +
    "\055\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e\063" +
    "\uff8e\001\002\000\056\022\uff8f\023\uff8f\024\uff8f\025\uff8f" +
    "\026\uff8f\035\uff8f\036\uff8f\040\uff8f\041\uff8f\042\uff8f\044" +
    "\uff8f\045\uff8f\046\uff8f\047\uff8f\054\uff8f\055\uff8f\056\uff8f" +
    "\057\uff8f\060\uff8f\061\uff8f\062\uff8f\063\uff8f\001\002\000" +
    "\056\022\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\035\uff8d" +
    "\036\uff8d\040\uff8d\041\uff8d\042\uff8d\044\uff8d\045\uff8d\046" +
    "\uff8d\047\uff8d\054\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d" +
    "\061\uff8d\062\uff8d\063\uff8d\001\002\000\056\022\uff8b\023" +
    "\uff8b\024\uff8b\025\uff8b\026\uff8b\035\uff8b\036\uff8b\040\uff8b" +
    "\041\uff8b\042\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\054" +
    "\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b" +
    "\063\uff8b\001\002\000\056\022\uff8a\023\uff8a\024\uff8a\025" +
    "\uff8a\026\uff8a\035\uff8a\036\uff8a\040\uff8a\041\uff8a\042\uff8a" +
    "\044\uff8a\045\uff8a\046\uff8a\047\uff8a\054\uff8a\055\uff8a\056" +
    "\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a\001\002" +
    "\000\020\076\045\077\041\100\046\101\042\102\037\103" +
    "\043\104\024\001\002\000\046\024\214\026\223\035\221" +
    "\036\220\040\205\041\215\042\207\044\211\045\224\046" +
    "\210\047\265\054\222\056\226\057\216\060\206\061\213" +
    "\062\212\063\225\001\002\000\056\022\uff93\023\uff93\024" +
    "\uff93\025\uff93\026\uff93\035\uff93\036\uff93\040\uff93\041\uff93" +
    "\042\uff93\044\uff93\045\uff93\046\uff93\047\uff93\054\uff93\055" +
    "\uff93\056\uff93\057\uff93\060\uff93\061\uff93\062\uff93\063\uff93" +
    "\001\002\000\056\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026" +
    "\uff8c\035\uff8c\036\uff8c\040\uff8c\041\uff8c\042\uff8c\044\uff8c" +
    "\045\uff8c\046\uff8c\047\uff8c\054\uff8c\055\uff8c\056\uff8c\057" +
    "\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\001\002\000\056" +
    "\022\uff89\023\uff89\024\uff89\025\uff89\026\uff89\035\uff89\036" +
    "\uff89\040\uff89\041\uff89\042\uff89\044\uff89\045\uff89\046\uff89" +
    "\047\uff89\054\uff89\055\uff89\056\uff89\057\uff89\060\uff89\061" +
    "\uff89\062\uff89\063\uff89\001\002\000\056\022\uff90\023\uff90" +
    "\024\uff90\025\uff90\026\uff90\035\uff90\036\uff90\040\uff90\041" +
    "\uff90\042\uff90\044\uff90\045\uff90\046\uff90\047\uff90\054\uff90" +
    "\055\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062\uff90\063" +
    "\uff90\001\002\000\036\020\167\021\175\027\163\036\200" +
    "\046\201\067\172\104\174\105\164\106\176\107\177\110" +
    "\171\111\170\112\166\113\165\001\002\000\052\020\167" +
    "\021\175\027\163\036\200\046\201\067\172\076\045\077" +
    "\041\100\046\101\042\102\037\103\043\104\202\105\164" +
    "\106\176\107\177\110\171\111\170\112\166\113\165\001" +
    "\002\000\046\024\uff93\026\uff93\035\uff93\036\uff93\040\uff93" +
    "\041\uff93\042\uff93\044\uff93\045\uff93\046\uff93\047\262\054" +
    "\uff93\056\uff93\057\uff93\060\uff93\061\uff93\062\uff93\063\uff93" +
    "\001\002\000\004\047\260\001\002\000\046\024\214\026" +
    "\223\035\221\036\220\040\205\041\215\042\207\044\211" +
    "\045\224\046\210\047\217\054\222\056\226\057\216\060" +
    "\206\061\213\062\212\063\225\001\002\000\036\020\167" +
    "\021\175\027\163\036\200\046\201\067\172\104\174\105" +
    "\164\106\176\107\177\110\171\111\170\112\166\113\165" +
    "\001\002\000\036\020\167\021\175\027\163\036\200\046" +
    "\201\067\172\104\174\105\164\106\176\107\177\110\171" +
    "\111\170\112\166\113\165\001\002\000\036\020\167\021" +
    "\175\027\163\036\200\046\201\067\172\104\174\105\164" +
    "\106\176\107\177\110\171\111\170\112\166\113\165\001" +
    "\002\000\040\020\167\021\175\027\163\036\200\046\201" +
    "\047\247\067\172\104\174\105\164\106\176\107\177\110" +
    "\171\111\170\112\166\113\165\001\002\000\036\020\167" +
    "\021\175\027\163\036\200\046\201\067\172\104\174\105" +
    "\164\106\176\107\177\110\171\111\170\112\166\113\165" +
    "\001\002\000\036\020\167\021\175\027\163\036\200\046" +
    "\201\067\172\104\174\105\164\106\176\107\177\110\171" +
    "\111\170\112\166\113\165\001\002\000\036\020\167\021" +
    "\175\027\163\036\200\046\201\067\172\104\174\105\164" +
    "\106\176\107\177\110\171\111\170\112\166\113\165\001" +
    "\002\000\004\104\243\001\002\000\036\020\167\021\175" +
    "\027\163\036\200\046\201\067\172\104\174\105\164\106" +
    "\176\107\177\110\171\111\170\112\166\113\165\001\002" +
    "\000\036\020\167\021\175\027\163\036\200\046\201\067" +
    "\172\104\174\105\164\106\176\107\177\110\171\111\170" +
    "\112\166\113\165\001\002\000\056\022\uff96\023\uff96\024" +
    "\uff96\025\uff96\026\uff96\035\uff96\036\uff96\040\uff96\041\uff96" +
    "\042\uff96\044\uff96\045\uff96\046\uff96\047\uff96\054\uff96\055" +
    "\uff96\056\uff96\057\uff96\060\uff96\061\uff96\062\uff96\063\uff96" +
    "\001\002\000\036\020\167\021\175\027\163\036\200\046" +
    "\201\067\172\104\174\105\164\106\176\107\177\110\171" +
    "\111\170\112\166\113\165\001\002\000\036\020\167\021" +
    "\175\027\163\036\200\046\201\067\172\104\174\105\164" +
    "\106\176\107\177\110\171\111\170\112\166\113\165\001" +
    "\002\000\036\020\167\021\175\027\163\036\200\046\201" +
    "\067\172\104\174\105\164\106\176\107\177\110\171\111" +
    "\170\112\166\113\165\001\002\000\036\020\167\021\175" +
    "\027\163\036\200\046\201\067\172\104\174\105\164\106" +
    "\176\107\177\110\171\111\170\112\166\113\165\001\002" +
    "\000\036\020\167\021\175\027\163\036\200\046\201\067" +
    "\172\104\174\105\164\106\176\107\177\110\171\111\170" +
    "\112\166\113\165\001\002\000\036\020\167\021\175\027" +
    "\163\036\200\046\201\067\172\104\174\105\164\106\176" +
    "\107\177\110\171\111\170\112\166\113\165\001\002\000" +
    "\036\020\167\021\175\027\163\036\200\046\201\067\172" +
    "\104\174\105\164\106\176\107\177\110\171\111\170\112" +
    "\166\113\165\001\002\000\046\022\uffa6\023\uffa6\024\214" +
    "\025\uffa6\026\uffa6\035\221\036\220\040\205\041\215\042" +
    "\207\044\uffa6\045\uffa6\046\uffa6\047\uffa6\054\uffa6\055\uffa6" +
    "\062\uffa6\063\uffa6\001\002\000\052\022\uffa7\023\uffa7\024" +
    "\214\025\uffa7\026\uffa7\035\221\036\220\040\205\041\215" +
    "\042\207\044\uffa7\045\uffa7\046\uffa7\047\uffa7\054\uffa7\055" +
    "\uffa7\056\226\057\216\060\206\061\213\001\002\000\056" +
    "\022\uffa1\023\uffa1\024\214\025\uffa1\026\uffa1\035\221\036" +
    "\220\040\205\041\215\042\207\044\uffa1\045\uffa1\046\uffa1" +
    "\047\uffa1\054\uffa1\055\uffa1\056\226\057\216\060\206\061" +
    "\213\062\212\063\225\001\002\000\046\024\214\025\233" +
    "\026\223\035\221\036\220\040\205\041\215\042\207\044" +
    "\211\045\224\046\210\054\222\056\226\057\216\060\206" +
    "\061\213\062\212\063\225\001\002\000\036\020\167\021" +
    "\175\027\163\036\200\046\201\067\172\104\174\105\164" +
    "\106\176\107\177\110\171\111\170\112\166\113\165\001" +
    "\002\000\054\022\uff97\023\uff97\024\214\025\uff97\035\221" +
    "\036\220\040\205\041\215\042\207\044\211\045\224\046" +
    "\uff97\047\uff97\054\uff97\055\uff97\056\226\057\216\060\206" +
    "\061\213\062\212\063\225\001\002\000\046\024\214\026" +
    "\223\035\221\036\220\040\205\041\215\042\207\044\211" +
    "\045\224\046\210\054\222\055\236\056\226\057\216\060" +
    "\206\061\213\062\212\063\225\001\002\000\056\022\uff99" +
    "\023\uff99\024\uff99\025\uff99\026\uff99\035\uff99\036\uff99\040" +
    "\uff99\041\uff99\042\uff99\044\uff99\045\uff99\046\uff99\047\uff99" +
    "\054\uff99\055\uff99\056\uff99\057\uff99\060\uff99\061\uff99\062" +
    "\uff99\063\uff99\001\002\000\056\022\uffa0\023\uffa0\024\214" +
    "\025\uffa0\026\uffa0\035\uffa0\036\uffa0\040\205\041\215\042" +
    "\207\044\uffa0\045\uffa0\046\uffa0\047\uffa0\054\uffa0\055\uffa0" +
    "\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\001" +
    "\002\000\056\022\uff9f\023\uff9f\024\214\025\uff9f\026\uff9f" +
    "\035\uff9f\036\uff9f\040\205\041\215\042\207\044\uff9f\045" +
    "\uff9f\046\uff9f\047\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f" +
    "\060\uff9f\061\uff9f\062\uff9f\063\uff9f\001\002\000\046\022" +
    "\uffa5\023\uffa5\024\214\025\uffa5\026\uffa5\035\221\036\220" +
    "\040\205\041\215\042\207\044\uffa5\045\uffa5\046\uffa5\047" +
    "\uffa5\054\uffa5\055\uffa5\062\uffa5\063\uffa5\001\002\000\056" +
    "\022\uff9d\023\uff9d\024\214\025\uff9d\026\uff9d\035\uff9d\036" +
    "\uff9d\040\uff9d\041\uff9d\042\uff9d\044\uff9d\045\uff9d\046\uff9d" +
    "\047\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061" +
    "\uff9d\062\uff9d\063\uff9d\001\002\000\056\022\uff98\023\uff98" +
    "\024\uff98\025\uff98\026\uff98\035\uff98\036\uff98\040\uff98\041" +
    "\uff98\042\uff98\044\uff98\045\uff98\046\uff98\047\uff98\054\uff98" +
    "\055\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062\uff98\063" +
    "\uff98\001\002\000\046\022\uffa3\023\uffa3\024\214\025\uffa3" +
    "\026\uffa3\035\221\036\220\040\205\041\215\042\207\044" +
    "\uffa3\045\uffa3\046\uffa3\047\uffa3\054\uffa3\055\uffa3\062\uffa3" +
    "\063\uffa3\001\002\000\052\022\uffa8\023\uffa8\024\214\025" +
    "\uffa8\026\uffa8\035\221\036\220\040\205\041\215\042\207" +
    "\044\uffa8\045\uffa8\046\uffa8\047\uffa8\054\uffa8\055\uffa8\056" +
    "\226\057\216\060\206\061\213\001\002\000\056\022\uffa2" +
    "\023\uffa2\024\214\025\uffa2\026\uffa2\035\221\036\220\040" +
    "\205\041\215\042\207\044\uffa2\045\224\046\uffa2\047\uffa2" +
    "\054\uffa2\055\uffa2\056\226\057\216\060\206\061\213\062" +
    "\212\063\225\001\002\000\056\022\uff91\023\uff91\024\uff91" +
    "\025\uff91\026\uff91\035\uff91\036\uff91\040\uff91\041\uff91\042" +
    "\uff91\044\uff91\045\uff91\046\uff91\047\uff91\054\uff91\055\uff91" +
    "\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91\063\uff91\001" +
    "\002\000\050\023\uffb3\024\214\026\223\035\221\036\220" +
    "\040\205\041\215\042\207\044\211\045\224\046\210\047" +
    "\uffb3\054\222\056\226\057\216\060\206\061\213\062\212" +
    "\063\225\001\002\000\006\023\252\047\253\001\002\000" +
    "\036\020\167\021\175\027\163\036\200\046\201\067\172" +
    "\104\174\105\164\106\176\107\177\110\171\111\170\112" +
    "\166\113\165\001\002\000\056\022\uff92\023\uff92\024\uff92" +
    "\025\uff92\026\uff92\035\uff92\036\uff92\040\uff92\041\uff92\042" +
    "\uff92\044\uff92\045\uff92\046\uff92\047\uff92\054\uff92\055\uff92" +
    "\056\uff92\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92\001" +
    "\002\000\050\023\uffb4\024\214\026\223\035\221\036\220" +
    "\040\205\041\215\042\207\044\211\045\224\046\210\047" +
    "\uffb4\054\222\056\226\057\216\060\206\061\213\062\212" +
    "\063\225\001\002\000\056\022\uff9c\023\uff9c\024\214\025" +
    "\uff9c\026\uff9c\035\uff9c\036\uff9c\040\uff9c\041\uff9c\042\uff9c" +
    "\044\uff9c\045\uff9c\046\uff9c\047\uff9c\054\uff9c\055\uff9c\056" +
    "\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\001\002" +
    "\000\046\022\uffa4\023\uffa4\024\214\025\uffa4\026\uffa4\035" +
    "\221\036\220\040\205\041\215\042\207\044\uffa4\045\uffa4" +
    "\046\uffa4\047\uffa4\054\uffa4\055\uffa4\062\uffa4\063\uffa4\001" +
    "\002\000\056\022\uff9e\023\uff9e\024\214\025\uff9e\026\uff9e" +
    "\035\uff9e\036\uff9e\040\uff9e\041\uff9e\042\uff9e\044\uff9e\045" +
    "\uff9e\046\uff9e\047\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e" +
    "\060\uff9e\061\uff9e\062\uff9e\063\uff9e\001\002\000\036\020" +
    "\167\021\175\027\163\036\200\046\201\067\172\104\174" +
    "\105\164\106\176\107\177\110\171\111\170\112\166\113" +
    "\165\001\002\000\056\022\uff94\023\uff94\024\214\025\uff94" +
    "\026\223\035\221\036\220\040\205\041\215\042\207\044" +
    "\211\045\224\046\uff94\047\uff94\054\uff94\055\uff94\056\226" +
    "\057\216\060\206\061\213\062\212\063\225\001\002\000" +
    "\036\020\167\021\175\027\163\036\200\046\201\067\172" +
    "\104\174\105\164\106\176\107\177\110\171\111\170\112" +
    "\166\113\165\001\002\000\056\022\uff95\023\uff95\024\214" +
    "\025\uff95\026\223\035\221\036\220\040\205\041\215\042" +
    "\207\044\211\045\224\046\uff95\047\uff95\054\uff95\055\uff95" +
    "\056\226\057\216\060\206\061\213\062\212\063\225\001" +
    "\002\000\056\022\uff9b\023\uff9b\024\214\025\uff9b\026\uff9b" +
    "\035\uff9b\036\uff9b\040\205\041\215\042\207\044\uff9b\045" +
    "\uff9b\046\uff9b\047\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b" +
    "\060\uff9b\061\uff9b\062\uff9b\063\uff9b\001\002\000\004\052" +
    "\143\001\002\000\040\020\uffb6\021\uffb6\046\uffb6\053\uffb6" +
    "\064\uffb6\066\uffb6\070\uffb6\071\uffb6\076\uffb6\077\uffb6\100" +
    "\uffb6\101\uffb6\102\uffb6\103\uffb6\104\uffb6\001\002\000\006" +
    "\046\271\054\270\001\002\000\036\020\167\021\175\027" +
    "\163\036\200\046\201\067\172\104\174\105\164\106\176" +
    "\107\177\110\171\111\170\112\166\113\165\001\002\000" +
    "\040\020\167\021\175\027\163\036\200\046\201\047\272" +
    "\067\172\104\174\105\164\106\176\107\177\110\171\111" +
    "\170\112\166\113\165\001\002\000\056\022\uff86\023\uff86" +
    "\024\uff86\025\uff86\026\uff86\035\uff86\036\uff86\040\uff86\041" +
    "\uff86\042\uff86\044\uff86\045\uff86\046\uff86\047\uff86\054\uff86" +
    "\055\uff86\056\uff86\057\uff86\060\uff86\061\uff86\062\uff86\063" +
    "\uff86\001\002\000\006\023\252\047\274\001\002\000\056" +
    "\022\uff85\023\uff85\024\uff85\025\uff85\026\uff85\035\uff85\036" +
    "\uff85\040\uff85\041\uff85\042\uff85\044\uff85\045\uff85\046\uff85" +
    "\047\uff85\054\uff85\055\uff85\056\uff85\057\uff85\060\uff85\061" +
    "\uff85\062\uff85\063\uff85\001\002\000\046\024\214\026\223" +
    "\035\221\036\220\040\205\041\215\042\207\044\211\045" +
    "\224\046\210\054\222\055\276\056\226\057\216\060\206" +
    "\061\213\062\212\063\225\001\002\000\056\022\uff87\023" +
    "\uff87\024\uff87\025\uff87\026\uff87\035\uff87\036\uff87\040\uff87" +
    "\041\uff87\042\uff87\044\uff87\045\uff87\046\uff87\047\uff87\054" +
    "\uff87\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87\062\uff87" +
    "\063\uff87\001\002\000\056\022\uff9a\023\uff9a\024\214\025" +
    "\uff9a\026\uff9a\035\uff9a\036\uff9a\040\uff9a\041\uff9a\042\uff9a" +
    "\044\uff9a\045\uff9a\046\uff9a\047\uff9a\054\uff9a\055\uff9a\056" +
    "\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\001\002" +
    "\000\046\022\301\024\214\026\223\035\221\036\220\040" +
    "\205\041\215\042\207\044\211\045\224\046\210\054\222" +
    "\056\226\057\216\060\206\061\213\062\212\063\225\001" +
    "\002\000\040\020\uffb9\021\uffb9\046\uffb9\053\uffb9\064\uffb9" +
    "\066\uffb9\070\uffb9\071\uffb9\076\uffb9\077\uffb9\100\uffb9\101" +
    "\uffb9\102\uffb9\103\uffb9\104\uffb9\001\002\000\036\020\167" +
    "\021\175\027\163\036\200\046\201\067\172\104\174\105" +
    "\164\106\176\107\177\110\171\111\170\112\166\113\165" +
    "\001\002\000\040\020\uffba\021\uffba\046\uffba\053\uffba\064" +
    "\uffba\066\uffba\070\uffba\071\uffba\076\uffba\077\uffba\100\uffba" +
    "\101\uffba\102\uffba\103\uffba\104\uffba\001\002\000\036\020" +
    "\167\021\175\027\163\036\200\046\201\067\172\104\174" +
    "\105\164\106\176\107\177\110\171\111\170\112\166\113" +
    "\165\001\002\000\040\020\167\021\175\027\163\036\200" +
    "\046\201\047\310\067\172\104\174\105\164\106\176\107" +
    "\177\110\171\111\170\112\166\113\165\001\002\000\004" +
    "\104\307\001\002\000\016\022\uffab\024\uffab\030\uffab\046" +
    "\uffab\047\uffab\054\uffab\001\002\000\016\022\uffaa\024\uffaa" +
    "\030\uffaa\046\uffaa\047\uffaa\054\uffaa\001\002\000\006\023" +
    "\252\047\312\001\002\000\016\022\uffa9\024\uffa9\030\uffa9" +
    "\046\uffa9\047\uffa9\054\uffa9\001\002\000\046\024\214\026" +
    "\223\035\221\036\220\040\205\041\215\042\207\044\211" +
    "\045\224\046\210\054\222\055\314\056\226\057\216\060" +
    "\206\061\213\062\212\063\225\001\002\000\016\022\uffaf" +
    "\024\uffaf\030\uffaf\046\uffaf\047\uffaf\054\uffaf\001\002\000" +
    "\046\022\316\024\214\026\223\035\221\036\220\040\205" +
    "\041\215\042\207\044\211\045\224\046\210\054\222\056" +
    "\226\057\216\060\206\061\213\062\212\063\225\001\002" +
    "\000\040\020\uffbb\021\uffbb\046\uffbb\053\uffbb\064\uffbb\066" +
    "\uffbb\070\uffbb\071\uffbb\076\uffbb\077\uffbb\100\uffbb\101\uffbb" +
    "\102\uffbb\103\uffbb\104\uffbb\001\002\000\006\030\320\054" +
    "\055\001\002\000\036\020\167\021\175\027\163\036\200" +
    "\046\201\067\172\104\174\105\164\106\176\107\177\110" +
    "\171\111\170\112\166\113\165\001\002\000\046\022\322" +
    "\024\214\026\223\035\221\036\220\040\205\041\215\042" +
    "\207\044\211\045\224\046\210\054\222\056\226\057\216" +
    "\060\206\061\213\062\212\063\225\001\002\000\040\020" +
    "\uffbd\021\uffbd\046\uffbd\053\uffbd\064\uffbd\066\uffbd\070\uffbd" +
    "\071\uffbd\076\uffbd\077\uffbd\100\uffbd\101\uffbd\102\uffbd\103" +
    "\uffbd\104\uffbd\001\002\000\036\020\167\021\175\027\163" +
    "\036\200\046\201\067\172\104\174\105\164\106\176\107" +
    "\177\110\171\111\170\112\166\113\165\001\002\000\046" +
    "\024\214\026\223\035\221\036\220\040\205\041\215\042" +
    "\207\044\211\045\224\046\210\047\325\054\222\056\226" +
    "\057\216\060\206\061\213\062\212\063\225\001\002\000" +
    "\004\052\143\001\002\000\042\020\uffb7\021\uffb7\046\uffb7" +
    "\053\uffb7\064\uffb7\065\327\066\uffb7\070\uffb7\071\uffb7\076" +
    "\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7\104\uffb7" +
    "\001\002\000\004\052\143\001\002\000\040\020\uffb8\021" +
    "\uffb8\046\uffb8\053\uffb8\064\uffb8\066\uffb8\070\uffb8\071\uffb8" +
    "\076\uffb8\077\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8\104" +
    "\uffb8\001\002\000\012\024\uffb2\046\uffb2\047\340\054\uffb2" +
    "\001\002\000\012\024\306\046\305\047\337\054\304\001" +
    "\002\000\004\047\334\001\002\000\012\020\156\021\147" +
    "\046\151\104\335\001\002\000\016\022\uffb2\024\uffb2\030" +
    "\uffb2\046\uffb2\047\uffb2\054\uffb2\001\002\000\016\022\uffac" +
    "\024\306\030\uffac\046\uffac\047\uffac\054\uffac\001\002\000" +
    "\016\022\uffae\024\uffae\030\uffae\046\uffae\047\uffae\054\uffae" +
    "\001\002\000\012\020\156\021\147\046\151\104\335\001" +
    "\002\000\016\022\uffad\024\306\030\uffad\046\uffad\047\uffad" +
    "\054\uffad\001\002\000\046\022\343\024\214\026\223\035" +
    "\221\036\220\040\205\041\215\042\207\044\211\045\224" +
    "\046\210\054\222\056\226\057\216\060\206\061\213\062" +
    "\212\063\225\001\002\000\040\020\uffb5\021\uffb5\046\uffb5" +
    "\053\uffb5\064\uffb5\066\uffb5\070\uffb5\071\uffb5\076\uffb5\077" +
    "\uffb5\100\uffb5\101\uffb5\102\uffb5\103\uffb5\104\uffb5\001\002" +
    "\000\004\053\uffe4\001\002\000\010\022\346\046\056\054" +
    "\055\001\002\000\012\010\uffd8\011\uffd8\012\uffd8\053\uffd8" +
    "\001\002\000\022\047\350\076\045\077\041\100\046\101" +
    "\042\102\037\103\043\104\024\001\002\000\004\052\143" +
    "\001\002\000\006\023\062\047\352\001\002\000\004\052" +
    "\143\001\002\000\012\010\uffce\011\uffce\012\uffce\053\uffce" +
    "\001\002\000\012\010\uffcd\011\uffcd\012\uffcd\053\uffcd\001" +
    "\002\000\004\104\054\001\002\000\004\052\143\001\002" +
    "\000\020\076\045\077\041\100\046\101\042\102\037\103" +
    "\043\104\024\001\002\000\004\104\054\001\002\000\004" +
    "\052\143\001\002\000\012\010\uffd2\011\uffd2\012\uffd2\053" +
    "\uffd2\001\002\000\010\030\364\046\056\054\055\001\002" +
    "\000\036\020\167\021\175\027\163\036\200\046\201\067" +
    "\172\104\174\105\164\106\176\107\177\110\171\111\170" +
    "\112\166\113\165\001\002\000\046\022\366\024\214\026" +
    "\223\035\221\036\220\040\205\041\215\042\207\044\211" +
    "\045\224\046\210\054\222\056\226\057\216\060\206\061" +
    "\213\062\212\063\225\001\002\000\012\010\uffd6\011\uffd6" +
    "\012\uffd6\053\uffd6\001\002\000\012\010\uffd3\011\uffd3\012" +
    "\uffd3\053\uffd3\001\002\000\010\030\371\046\056\054\055" +
    "\001\002\000\036\020\167\021\175\027\163\036\200\046" +
    "\201\067\172\104\174\105\164\106\176\107\177\110\171" +
    "\111\170\112\166\113\165\001\002\000\046\022\373\024" +
    "\214\026\223\035\221\036\220\040\205\041\215\042\207" +
    "\044\211\045\224\046\210\054\222\056\226\057\216\060" +
    "\206\061\213\062\212\063\225\001\002\000\012\010\uffd7" +
    "\011\uffd7\012\uffd7\053\uffd7\001\002\000\004\052\143\001" +
    "\002\000\012\010\uffd4\011\uffd4\012\uffd4\053\uffd4\001\002" +
    "\000\004\022\377\001\002\000\012\010\uffd1\011\uffd1\012" +
    "\uffd1\053\uffd1\001\002\000\004\016\u0101\001\002\000\004" +
    "\052\u0102\001\002\000\004\010\u0103\001\002\000\004\015" +
    "\u0104\001\002\000\004\103\u0105\001\002\000\004\017\u0106" +
    "\001\002\000\004\046\u0107\001\002\000\020\076\045\077" +
    "\041\100\046\101\042\102\037\103\043\104\024\001\002" +
    "\000\006\023\062\047\u0109\001\002\000\004\052\143\001" +
    "\002\000\004\053\u010b\001\002\000\004\002\ufff8\001\002" +
    "\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\014\002\007\022\003\023\013\024\004\025" +
    "\011\001\001\000\002\001\001\000\012\022\u010b\023\013" +
    "\024\004\025\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\105\001\001\000\012" +
    "\022\104\023\013\024\004\025\011\001\001\000\004\024" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\017\001\001\000\006\027\067\030\070\001\001\000" +
    "\004\033\020\001\001\000\002\001\001\000\006\037\024" +
    "\040\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\037\031\040\022\001\001\000\006" +
    "\037\027\040\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\016\033\017\046\036\034" +
    "\040\043\042\037\044\035\001\001\000\004\015\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\016\033\017\046\036\047\040\043\042\037\044" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\060\016\056\017\046\040\043" +
    "\001\001\000\004\015\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\063\017\046\040\043\001\001" +
    "\000\002\001\001\000\004\015\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\074\040" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\076\040\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\067\030\101\001\001\000\002\001\001" +
    "\000\012\022\103\023\013\024\004\025\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\022\106\023\013" +
    "\024\004\025\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\111\001\001\000\004\032\112\001\001" +
    "\000\004\034\115\001\001\000\004\040\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\037\117\040\022" +
    "\001\001\000\002\001\001\000\006\035\125\050\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\016\135\017\046\040\043\041\137\043\132\044" +
    "\140\045\127\046\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\033\017\046\040" +
    "\043\044\375\001\001\000\012\016\033\017\046\040\043" +
    "\044\373\001\001\000\002\001\001\000\012\016\354\017" +
    "\046\040\043\044\355\001\001\000\002\001\001\000\004" +
    "\015\344\001\001\000\002\001\001\000\006\035\343\050" +
    "\124\001\001\000\004\003\141\001\001\000\002\001\001" +
    "\000\004\004\143\001\001\000\016\005\144\006\147\016" +
    "\153\017\046\021\154\040\043\001\001\000\002\001\001" +
    "\000\004\020\341\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\332\021\331\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\316\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\277" +
    "\001\001\000\002\001\001\000\004\020\172\001\001\000" +
    "\004\020\276\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\266\017\046\040\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\263\001\001" +
    "\000\006\017\202\020\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\256\001\001" +
    "\000\004\020\255\001\001\000\004\020\254\001\001\000" +
    "\006\007\250\020\247\001\001\000\004\020\245\001\001" +
    "\000\004\020\244\001\001\000\004\020\243\001\001\000" +
    "\002\001\001\000\004\020\241\001\001\000\004\020\240" +
    "\001\001\000\002\001\001\000\004\020\237\001\001\000" +
    "\004\020\236\001\001\000\004\020\234\001\001\000\004" +
    "\020\231\001\001\000\004\020\230\001\001\000\004\020" +
    "\227\001\001\000\004\020\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\253" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\260" +
    "\001\001\000\002\001\001\000\004\020\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\265\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\274\001" +
    "\001\000\006\007\272\020\247\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\314\001\001\000\002\001\001\000" +
    "\004\020\312\001\001\000\006\007\310\020\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\323\001\001\000\002\001\001\000" +
    "\004\003\325\001\001\000\002\001\001\000\004\003\327" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\335\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\340\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\014\350\016\056\017\046\040\043\001\001" +
    "\000\004\003\353\001\001\000\002\001\001\000\004\003" +
    "\352\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\367\001\001\000\004\003\366\001\001\000\012\016" +
    "\357\017\046\040\043\044\360\001\001\000\004\015\362" +
    "\001\001\000\004\003\361\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\364\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\371\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\374\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\u0107\016\056" +
    "\017\046\040\043\001\001\000\002\001\001\000\004\003" +
    "\u0109\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File(this.name);
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2
 return lexer.next_token(); 
    }

//@@CUPDBG0

	protected Lexer lexer;
	protected String name;
	public Parser(String _name) {
		this();
		this.name = _name;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Elements 
            {
              Block RESULT =null;
		Location elementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location elementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Elements elements = (Elements)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG3
 
				System.out.println("1");
                System.out.println( elements ); 
                System.out.println("2");
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Block start_val = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Elements ::= Main 
            {
              Elements RESULT =null;
		//@@CUPDBG4

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elements",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Elements ::= Interface Elements 
            {
              Elements RESULT =null;
		//@@CUPDBG5

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elements",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Elements ::= Class Elements 
            {
              Elements RESULT =null;
		//@@CUPDBG6

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elements",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Elements ::= UL_Abstrait Class Elements 
            {
              Elements RESULT =null;
		//@@CUPDBG7

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elements",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Elements ::= UL_Definitif Class Elements 
            {
              Elements RESULT =null;
		//@@CUPDBG8

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elements",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Interface ::= UL_Interface UL_Identificateur Generics MultipleInherits UL_Accolade_Ouvrante InterfaceElements UL_Accolade_Fermante 
            {
              Element RESULT =null;
		//@@CUPDBG9

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Interface",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Class ::= UL_Classe UL_Identificateur Generics SingleInherits Implements UL_Accolade_Ouvrante ClassElements UL_Accolade_Fermante 
            {
              Element RESULT =null;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location classElementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location classElementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object classElements = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG10

			/**ClassDeclaration _result = new ClassDeclaration(name, (List<ClassElement>) classElements);
			System.out.println(_result.toString());*/
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Class",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Main ::= UL_Public UL_Classe UL_Classe_Principale UL_Accolade_Ouvrante UL_Public UL_De_Classe UL_Type_Vide UL_Methode_Principale UL_Parenthese_Ouvrante Parameters UL_Parenthese_Fermante Block UL_Accolade_Fermante 
            {
              Element RESULT =null;
		Location parametersxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location parametersxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<ParameterDeclaration> parameters = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG11

			/**MainDeclaration _result = new MainDeclaration(parameters, block);
			System.out.println(_result.toString());
			SymbolTable tds = new SymbolTable();
			if (_result.collect(tds)) {
				System.out.println("Collect succeeded : " + tds);
				if (_result.resolve(tds)) {
					System.out.println("Resolve succeeded.");
				} else {
					System.out.println("Resolve failed." + tds);
				}
			} else {
				System.out.println("Collect failed : " + tds);
			}*/
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Generics ::= 
            {
              Object RESULT =null;
		//@@CUPDBG12

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Generics",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Generics ::= UL_Inferieur TypeParameters UL_Superieur 
            {
              Object RESULT =null;
		//@@CUPDBG13

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Generics",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TypeParameter ::= UL_Identificateur 
            {
              Object RESULT =null;
		//@@CUPDBG14

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeParameter",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TypeParameter ::= UL_Identificateur UL_Herite Constraints 
            {
              Object RESULT =null;
		//@@CUPDBG15

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeParameter",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Constraints ::= Instance 
            {
              Object RESULT =null;
		//@@CUPDBG16

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constraints",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Constraints ::= Instance UL_Esperluette Constraints 
            {
              Object RESULT =null;
		//@@CUPDBG17

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constraints",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TypeParameters ::= TypeParameter 
            {
              Object RESULT =null;
		//@@CUPDBG18

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeParameters",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TypeParameters ::= TypeParameter UL_Virgule TypeParameters 
            {
              Object RESULT =null;
		//@@CUPDBG19

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeParameters",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SingleInherits ::= 
            {
              Object RESULT =null;
		//@@CUPDBG20

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SingleInherits",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SingleInherits ::= UL_Herite Instance 
            {
              Object RESULT =null;
		//@@CUPDBG21

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SingleInherits",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MultipleInherits ::= 
            {
              Object RESULT =null;
		//@@CUPDBG22

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultipleInherits",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MultipleInherits ::= UL_Herite Instances 
            {
              Object RESULT =null;
		//@@CUPDBG23

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultipleInherits",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Implements ::= 
            {
              Object RESULT =null;
		//@@CUPDBG24

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Implements",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Implements ::= UL_Realise Instances 
            {
              Object RESULT =null;
		//@@CUPDBG25

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Implements",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Instances ::= Instance UL_Virgule Instances 
            {
              Object RESULT =null;
		//@@CUPDBG26

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instances",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Instances ::= Instance 
            {
              Object RESULT =null;
		//@@CUPDBG27

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instances",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Instance ::= UL_Identificateur 
            {
              Object RESULT =null;
		//@@CUPDBG28

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instance",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Instance ::= Instance UL_Inferieur Instances UL_Superieur 
            {
              Object RESULT =null;
		//@@CUPDBG29

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instance",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassElements ::= 
            {
              Object RESULT =null;
		//@@CUPDBG30

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassElements",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassElements ::= AccessRight ClassElement ClassElements 
            {
              Object RESULT =null;
		//@@CUPDBG31

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassElements",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // InterfaceElements ::= 
            {
              Object RESULT =null;
		//@@CUPDBG32

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InterfaceElements",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // InterfaceElements ::= InterfaceElement InterfaceElements 
            {
              Object RESULT =null;
		//@@CUPDBG33

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InterfaceElements",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AccessRight ::= UL_Public 
            {
              Object RESULT =null;
		//@@CUPDBG34

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccessRight",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AccessRight ::= UL_Protege 
            {
              Object RESULT =null;
		//@@CUPDBG35

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccessRight",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AccessRight ::= UL_Prive 
            {
              Object RESULT =null;
		//@@CUPDBG36

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccessRight",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ElementNature ::= UL_De_Classe 
            {
              Object RESULT =null;
		//@@CUPDBG37

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementNature",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ElementNature ::= 
            {
              Object RESULT =null;
		//@@CUPDBG38

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementNature",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClassElement ::= Attribute 
            {
              Object RESULT =null;
		//@@CUPDBG39

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassElement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ClassElement ::= Method 
            {
              Object RESULT =null;
		//@@CUPDBG40

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassElement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ClassElement ::= Constructor 
            {
              Object RESULT =null;
		//@@CUPDBG41

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassElement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // InterfaceElement ::= Signature UL_Point_Virgule 
            {
              Object RESULT =null;
		Location entetexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location entetexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object entete = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG42

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InterfaceElement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Attribute ::= Type Identifiant UL_Point_Virgule 
            {
              Object RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG43

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Attribute",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Attribute ::= UL_De_Classe Type Identifiant UL_Egal Expression UL_Point_Virgule 
            {
              Object RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location valeurxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valeurxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression valeur = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG44

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Attribute",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Attribute ::= UL_De_Classe UL_Definitif Type Identifiant UL_Egal Expression UL_Point_Virgule 
            {
              Object RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location valeurxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valeurxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression valeur = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG45

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Attribute",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Method ::= Signature Block 
            {
              Object RESULT =null;
		Location entetexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location entetexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object entete = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location corpsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location corpsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block corps = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG46

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Method",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Method ::= UL_Definitif Signature Block 
            {
              Object RESULT =null;
		Location entetexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location entetexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object entete = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location corpsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location corpsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block corps = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG47

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Method",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Method ::= UL_De_Classe Signature Block 
            {
              Object RESULT =null;
		Location entetexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location entetexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object entete = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location corpsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location corpsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block corps = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG48

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Method",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Method ::= UL_De_Classe UL_Definitif Signature Block 
            {
              Object RESULT =null;
		Location entetexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location entetexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object entete = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location corpsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location corpsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block corps = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG49

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Method",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Method ::= UL_Abstrait Signature UL_Point_Virgule 
            {
              Object RESULT =null;
		Location entetexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location entetexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object entete = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG50

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Method",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Signature ::= Type Identifiant UL_Parenthese_Ouvrante Parameters UL_Parenthese_Fermante 
            {
              Object RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ParameterDeclaration> parametres = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG51

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Signature",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Signature ::= Type Identifiant UL_Parenthese_Ouvrante UL_Parenthese_Fermante 
            {
              Object RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG52

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Signature",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Constructor ::= UL_Identificateur UL_Parenthese_Ouvrante Parameters UL_Parenthese_Fermante Block 
            {
              Object RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<ParameterDeclaration> parametres = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG53

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constructor",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Constructor ::= UL_Identificateur UL_Parenthese_Ouvrante UL_Parenthese_Fermante Block 
            {
              Object RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG54

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constructor",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Block ::= UL_Accolade_Ouvrante Instructions UL_Accolade_Fermante 
            {
              Block RESULT =null;
		Location instructionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location instructionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG55
 
				RESULT = new Block( instructions ); 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Atomique ::= UL_Type_Booleen 
            {
              Type RESULT =null;
		//@@CUPDBG56
 
				RESULT = AtomicType.BooleanType; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Atomique ::= UL_Type_Caractere 
            {
              Type RESULT =null;
		//@@CUPDBG57
 
				RESULT = AtomicType.CharacterType; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Atomique ::= UL_Type_Chaine 
            {
              Type RESULT =null;
		//@@CUPDBG58
 
				RESULT = AtomicType.StringType; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Atomique ::= UL_Type_Entier 
            {
              Type RESULT =null;
		//@@CUPDBG59
 
				RESULT = AtomicType.IntegerType; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Atomique ::= UL_Type_Flottant 
            {
              Type RESULT =null;
		//@@CUPDBG60
 
				RESULT = AtomicType.FloatingType; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Atomique ::= UL_Type_Vide 
            {
              Type RESULT =null;
		//@@CUPDBG61
 
				RESULT = AtomicType.VoidType; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Type ::= Atomique 
            {
              Type RESULT =null;
		Location atomiquexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location atomiquexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type atomique = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG62
 
				RESULT = atomique; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Type ::= Instance 
            {
              Type RESULT =null;
		Location instancexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location instancexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object instance = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG63

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Instructions ::= Instructions Instruction 
            {
              List<Instruction> RESULT =null;
		Location instructionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location instructionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location instructionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location instructionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG64

					instructions.add( instruction );
					RESULT = instructions; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instructions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Instructions ::= 
            {
              List<Instruction> RESULT =null;
		//@@CUPDBG65
 RESULT = new LinkedList<Instruction>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instructions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Identifiant ::= UL_Identificateur 
            {
              Pair<String,PartialType> RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG66
 
					RESULT = new Pair<String,PartialType>( nom, null ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifiant",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Identifiant ::= Identifiant UL_Crochet_Ouvrant UL_Crochet_Fermant 
            {
              Pair<String,PartialType> RESULT =null;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG67

					if (identifiant.getRight() == null) {
						identifiant.setRight( new PartialArrayType() );
					} else {
						identifiant.getRight().enrich(new PartialArrayType());
					}
					RESULT = identifiant;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifiant",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Parameters ::= Parameters UL_Virgule Type Identifiant 
            {
              List<ParameterDeclaration> RESULT =null;
		Location parametersxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location parametersxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<ParameterDeclaration> parameters = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG68

					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					parameters.add( new ParameterDeclaration( identifiant.getLeft(), _type) );
					RESULT = parameters;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Parameters ::= Type Identifiant 
            {
              List<ParameterDeclaration> RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG69

					List<ParameterDeclaration> _parameters = new LinkedList<ParameterDeclaration>();
					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					_parameters.add( new ParameterDeclaration( identifiant.getLeft(), _type) );
					RESULT = _parameters;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Declaration ::= Type Identifiant UL_Egal Expression UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location valeurxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valeurxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression valeur = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG70

					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					RESULT = new VariableDeclaration( identifiant.getLeft(), _type, valeur);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Instruction ::= Declaration 
            {
              Instruction RESULT =null;
		Location declarationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declarationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Instruction declaration = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG71
 
					RESULT = declaration; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Instruction ::= Affectable UL_Egal Expression UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG72

					RESULT = new Assignment( affectable, expression);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Instruction ::= Affectable UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG73

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Instruction ::= UL_Afficher Expression UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG74

					RESULT = new Printer( expression );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Instruction ::= UL_Si UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante Block UL_Sinon Block 
            {
              Instruction RESULT =null;
		Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location alorsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location alorsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Block alors = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sinonxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sinonxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block sinon = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG75
 
					RESULT = new Conditional( condition, alors, sinon); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Instruction ::= UL_Si UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante Block 
            {
              Instruction RESULT =null;
		Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location alorsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location alorsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block alors = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG76
 
					RESULT = new Conditional( condition, alors); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Instruction ::= UL_Tant_Que UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante Block 
            {
              Instruction RESULT =null;
		Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG77
 
					RESULT = new Repetition( condition, body ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Instruction ::= UL_Retour Expression UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG78

					RESULT = new Return( expression);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expressions ::= Expressions UL_Virgule Expression 
            {
              List<Expression> RESULT =null;
		Location expressionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expressionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Expression> expressions = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG79

					expressions.add( expression );
					RESULT = expressions; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expressions",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expressions ::= Expression 
            {
              List<Expression> RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG80
 
					List<Expression> _expressions = new LinkedList<Expression>();
					_expressions.add( expression );
					RESULT = _expressions;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expressions",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Affectable ::= UL_Identificateur 
            {
              AssignableExpression RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG81

					RESULT = new VariableAssignment( nom );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Affectable ::= UL_Moi 
            {
              AssignableExpression RESULT =null;
		//@@CUPDBG82

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Affectable ::= UL_Super 
            {
              AssignableExpression RESULT =null;
		//@@CUPDBG83

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Affectable ::= Affectable UL_Crochet_Ouvrant Expression UL_Crochet_Fermant 
            {
              AssignableExpression RESULT =null;
		Location tableauxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location tableauxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		AssignableExpression tableau = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location indicexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location indicexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression indice = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG84

					RESULT = new ArrayAssignment( tableau, indice);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Affectable ::= UL_Parenthese_Ouvrante Affectable UL_Parenthese_Fermante 
            {
              AssignableExpression RESULT =null;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG85

					RESULT = affectable;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Affectable ::= UL_Parenthese_Ouvrante UL_Identificateur UL_Parenthese_Fermante Affectable 
            {
              AssignableExpression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG86
 
					RESULT = new AssignableConversion( affectable, type); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Affectable ::= UL_Parenthese_Ouvrante Atomique UL_Parenthese_Fermante Affectable 
            {
              AssignableExpression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG87
 
					RESULT = new AssignableConversion( affectable, type); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Affectable ::= Affectable UL_Point UL_Identificateur 
            {
              AssignableExpression RESULT =null;
		Location enregistrementxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location enregistrementxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		AssignableExpression enregistrement = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location etiquettexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etiquettexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String etiquette = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG88

					RESULT = new FieldAssignment( enregistrement, etiquette);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Affectable ::= Affectable UL_Parenthese_Ouvrante UL_Parenthese_Fermante 
            {
              AssignableExpression RESULT =null;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG89

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Affectable ::= Affectable UL_Parenthese_Ouvrante Expressions UL_Parenthese_Fermante 
            {
              AssignableExpression RESULT =null;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> parametres = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG90

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expression ::= Expression UL_Double_Egal Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG91
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Equals, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expression ::= Expression UL_Exclamation_Egal Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG92
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Different, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expression ::= Expression UL_Inferieur Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG93
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Lesser, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expression ::= Expression UL_Superieur Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG94
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Greater, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expression ::= Expression UL_Inferieur_Egal Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG95
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.LesserOrEqual, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expression ::= Expression UL_Superieur_Egal Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG96
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.GreaterOrEqual, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expression ::= Expression UL_Double_Barre Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG97
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Or, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expression ::= Expression UL_Double_Esperluette Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG98
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.And, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expression ::= Expression UL_Plus Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG99
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Add, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expression ::= Expression UL_Moins Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG100
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Substract, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expression ::= Expression UL_Asterisque Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG101
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Multiply, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expression ::= Expression UL_Oblique Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG102
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Divide, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expression ::= Expression UL_Pour_Cent Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG103
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Modulo, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expression ::= UL_Moins Expression 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG104
 
					RESULT = new UnaryExpression( UnaryOperator.Opposite, expression); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Expression ::= UL_Point_Exclamation Expression 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG105
 
					RESULT = new UnaryExpression( UnaryOperator.Negate, expression); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Expression ::= Expression UL_Crochet_Ouvrant Expression UL_Crochet_Fermant 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location indicexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location indicexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression indice = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG106

					RESULT = new ArrayAccess( expression, indice );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expression ::= Expression UL_Point UL_Identificateur 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location etiquettexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etiquettexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String etiquette = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG107

					RESULT = new FieldAccess( expression, etiquette );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Expression ::= Expression UL_Point_Interrogation Expression UL_Deux_Points Expression 
            {
              Expression RESULT =null;
		Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location alorsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location alorsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression alors = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sinonxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sinonxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression sinon = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG108

					RESULT = new ConditionalExpression( condition, alors, sinon);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Expression ::= UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG109
 
					RESULT = expression; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Expression ::= UL_Parenthese_Ouvrante UL_Identificateur UL_Parenthese_Fermante Expression 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG110
 
					RESULT = new AccessibleConversion( expression, type); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Expression ::= UL_Parenthese_Ouvrante Atomique UL_Parenthese_Fermante Expression 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG111
 
					RESULT = new AccessibleConversion( expression, type); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Expression ::= UL_Identificateur 
            {
              Expression RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG112
 
					RESULT = new IdentifierAccess( nom ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Expression ::= Expression UL_Parenthese_Ouvrante Expressions UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location fonctionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location fonctionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Expression fonction = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> parametres = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG113
 
					/* début retrait miniJava
					RESULT = new FunctionCall( nom, parametres ); 
					fin retrait miniJava  */
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Expression ::= Expression UL_Parenthese_Ouvrante UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location fonctionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location fonctionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression fonction = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG114

					/* retrait miniJava
					List<Expression> _parametres = new LinkedList<Expression>();
					RESULT = new FunctionCall( nom, _parametres );
					fin retrait miniJava  */ 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Expression ::= UL_Nombre_Entier 
            {
              Expression RESULT =null;
		Location entierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location entierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String entier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG115
 
					RESULT = new IntegerValue( entier ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Expression ::= UL_Vrai 
            {
              Expression RESULT =null;
		//@@CUPDBG116
 
					RESULT = BooleanValue.True; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Expression ::= UL_Faux 
            {
              Expression RESULT =null;
		//@@CUPDBG117
 
					RESULT = BooleanValue.False; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Expression ::= UL_Moi 
            {
              Expression RESULT =null;
		//@@CUPDBG118

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Expression ::= UL_Super 
            {
              Expression RESULT =null;
		//@@CUPDBG119

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Expression ::= UL_Nul 
            {
              Expression RESULT =null;
		//@@CUPDBG120
 
					RESULT = NullValue.Null; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Expression ::= UL_Nombre_Flottant 
            {
              Expression RESULT =null;
		Location flottantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location flottantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String flottant = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG121
 
					RESULT = new FloatingValue( flottant ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Expression ::= UL_Caractere 
            {
              Expression RESULT =null;
		Location caracterexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location caracterexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String caractere = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG122
 
					RESULT = new CharacterValue( caractere ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Expression ::= UL_Chaine 
            {
              Expression RESULT =null;
		Location chainexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location chainexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String chaine = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG123
 
					RESULT = new StringValue( chaine ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Expression ::= UL_Nouveau Type UL_Crochet_Ouvrant Expression UL_Crochet_Fermant 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location taillexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location taillexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression taille = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG124
 
					RESULT = new ArrayAllocation( type, taille ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Expression ::= UL_Nouveau Type UL_Parenthese_Ouvrante UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG125
 
					/* début retrait miniJava
					RESULT = new PointerAllocation( type ); 
					fin retrait miniJava */
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Expression ::= UL_Nouveau Type UL_Parenthese_Ouvrante Expressions UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> parametres = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG126
 
					/* début retrait miniJava
					RESULT = new PointerAllocation( type ); 
					fin retrait miniJava */
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
