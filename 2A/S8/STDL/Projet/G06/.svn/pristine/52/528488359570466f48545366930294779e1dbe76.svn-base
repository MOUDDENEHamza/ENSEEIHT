package fr.n7.stl.block.ast.instruction;

import fr.n7.stl.block.ast.SemanticsUndefinedException;
import fr.n7.stl.block.ast.expression.Expression;
import fr.n7.stl.block.ast.scope.Declaration;
import fr.n7.stl.block.ast.scope.HierarchicalScope;
import fr.n7.stl.tam.ast.Fragment;
import fr.n7.stl.tam.ast.Register;
import fr.n7.stl.tam.ast.TAMFactory;

public class MethodCall implements Instruction {

    protected Expression method;

    public MethodCall(Expression _method) {
        this.method = _method;
    }

    @Override
    public String toString() {
        return this.method + ";\n";
    }

    @Override
    public boolean collectAndBackwardResolve(HierarchicalScope<Declaration> _scope) {
        throw new SemanticsUndefinedException("collect undifined");
    }

    @Override
    public boolean fullResolve(HierarchicalScope<Declaration> _scope) {
        throw new SemanticsUndefinedException("resolve undifined");
    }

    @Override
    public boolean checkType() {
        throw new SemanticsUndefinedException("checkType undifined");
    }

    @Override
    public int allocateMemory(Register _register, int _offset) {
        throw new SemanticsUndefinedException("allocateMemory undifined");
    }

    @Override
    public Fragment getCode(TAMFactory _factory) {
        throw new SemanticsUndefinedException("getCode undifined");
    }

}
