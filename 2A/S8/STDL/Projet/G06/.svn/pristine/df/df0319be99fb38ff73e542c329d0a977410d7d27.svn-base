package fr.n7.stl.block.ast.classElement;

import fr.n7.stl.block.ast.Block;
import fr.n7.stl.block.ast.instruction.declaration.ParameterDeclaration;
import fr.n7.stl.block.ast.scope.Declaration;
import fr.n7.stl.block.ast.scope.HierarchicalScope;
import fr.n7.stl.block.ast.scope.SymbolTable;
import fr.n7.stl.block.ast.type.Type;
import fr.n7.stl.tam.ast.Fragment;
import fr.n7.stl.tam.ast.Register;
import fr.n7.stl.tam.ast.TAMFactory;
import fr.n7.stl.util.Logger;

public class MethodDeclaration implements ClassElement, Declaration {

    protected AccessRight accessRight;

    protected ElementState state;

    protected Signature signature;

    protected Block corps;

    protected SymbolTable parametersTable;

    public MethodDeclaration(AccessRight _accessRight, ElementState _state, Signature _signature, Block _corps) {
        this.accessRight = _accessRight;
        this.state = _state;
        this.signature = _signature;
        this.corps = _corps;
    }

    public String toString() {
        return this.accessRight.toString() + " " + this.state.toString() + " " + this.signature.toString() + " "
                + corps;
    }

    @Override
    public boolean collectAndBackwardResolve(HierarchicalScope<Declaration> _scope) {
        if (((HierarchicalScope<Declaration>) _scope).accepts(this)) {
            _scope.register(this);
            SymbolTable tableParametres = new SymbolTable(_scope);
            boolean result = true;
            if (this.signature.getParameters() != null) {
                for (ParameterDeclaration d : this.signature.getParameters()) {
                    tableParametres.register(d);
                }
            }
            this.parametersTable = tableParametres;
            result = this.corps.collect(tableParametres);
            return result;
        } else {
            Logger.error("The method identifier " + this.getName() + " is already defined.");
            return false;
        }
    }

    @Override
    public boolean fullResolve(HierarchicalScope<Declaration> _scope) {
        SymbolTable.methodDeclaration = this;
        return this.corps.resolve(this.parametersTable);
    }

    @Override
    public boolean checkType() {
        // TODO Auto-generated method stub
        return false;
    }

    @Override
    public int allocateMemory(Register _register, int _offset) {
        // TODO Auto-generated method stub
        return 0;
    }

    @Override
    public Fragment getCode(TAMFactory _factory) {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public String getName() {
        return this.signature.getName();
    }

    @Override
    public Type getType() {
        return this.signature.getType();
    }

}
