package fr.n7.stl.block.ast.expression;

import java.util.Iterator;
import java.util.List;

import fr.n7.stl.block.ast.scope.Declaration;
import fr.n7.stl.block.ast.scope.HierarchicalScope;
import fr.n7.stl.block.ast.type.Type;
import fr.n7.stl.tam.ast.Fragment;
import fr.n7.stl.tam.ast.TAMFactory;

public class AbstractMethod implements Expression {

    protected Expression record;
    protected List<Expression> parameters;

    public AbstractMethod(Expression _record, List<Expression> _parameters) {
        this.record = _record;
        this.parameters = _parameters;
    }

    @Override
    public String toString() {
        String _result = this.record + "(";
        if (parameters != null) {
            Iterator<Expression> _iter = this.parameters.iterator();
            if (_iter.hasNext()) {
                _result += _iter.next();
                while (_iter.hasNext()) {
                    _result += " ," + _iter.next();
                }
            }
        }
        return _result + ")";

    }

    @Override
    public boolean collectAndBackwardResolve(HierarchicalScope<Declaration> _scope) {
        // TODO Auto-generated method stub
        return false;
    }

    @Override
    public boolean fullResolve(HierarchicalScope<Declaration> _scope) {
        // TODO Auto-generated method stub
        return false;
    }

    @Override
    public Type getType() {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public Fragment getCode(TAMFactory _factory) {
        // TODO Auto-generated method stub
        return null;
    }

}
