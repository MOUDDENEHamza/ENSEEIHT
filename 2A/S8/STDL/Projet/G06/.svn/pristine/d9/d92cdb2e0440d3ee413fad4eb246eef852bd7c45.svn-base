package fr.n7.stl.block.ast.expression.allocation;

import java.util.Iterator;
import java.util.List;

import fr.n7.stl.block.ast.SemanticsUndefinedException;
import fr.n7.stl.block.ast.classElement.ConstructorDeclaration;
import fr.n7.stl.block.ast.element.ClassDeclaration;
import fr.n7.stl.block.ast.expression.Expression;
import fr.n7.stl.block.ast.scope.Declaration;
import fr.n7.stl.block.ast.scope.HierarchicalScope;
import fr.n7.stl.block.ast.type.Type;
import fr.n7.stl.tam.ast.Fragment;
import fr.n7.stl.tam.ast.TAMFactory;
import fr.n7.stl.util.Logger;

public class ConstructorAllocation implements Expression {

    protected Type element;

    protected List<Expression> parameters;

    public ConstructorAllocation(Type _element, List<Expression> _parametres) {
        this.element = _element;
        this.parameters = _parametres;
    }

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        String _result = "new " + this.element + "(";
        if (parameters != null) {
            Iterator<Expression> _iter = this.parameters.iterator();
            if (_iter.hasNext()) {
                _result += _iter.next();
                while (_iter.hasNext()) {
                    _result += " ," + _iter.next();
                }
            }
        }
        return _result + ")";
    }

    @Override
    public boolean collectAndBackwardResolve(HierarchicalScope<Declaration> _scope) {
        Declaration d = _scope.get(this.element.toString());
        boolean result = true;
        if (d instanceof ClassDeclaration) {
            List<ConstructorDeclaration> constructors = ((ClassDeclaration) d).getClassConstructors();
            for (ConstructorDeclaration c : constructors) {
                if (this.parameters.size() == c.getParameters().size()) {
                    for (Expression exp : this.parameters) {
                        result = result && exp.collectAndBackwardResolve(_scope);
                    }
                }
            }
            return result;
        } else {
            Logger.error("The class identifier " + this.element.toString() + " is not defined.");
            return false;
        }
    }

    @Override
    public boolean fullResolve(HierarchicalScope<Declaration> _scope) {
        Declaration d = _scope.get(this.element.toString());
        boolean result = true;
        if (d instanceof ClassDeclaration) {
            List<ConstructorDeclaration> constructors = ((ClassDeclaration) d).getClassConstructors();
            for (ConstructorDeclaration c : constructors) {
                if (this.parameters.size() == c.getParameters().size()) {
                    for (Expression exp : this.parameters) {
                        result = result && exp.fullResolve(_scope);
                    }
                }
            }
            return result;
        } else {
            Logger.error("The class identifier " + this.element.toString() + " is not defined.");
            return false;
        }
    }

    @Override
    public Type getType() {
        throw new SemanticsUndefinedException("getType Constructor Allocation");
    }

    @Override
    public Fragment getCode(TAMFactory _factory) {
        throw new SemanticsUndefinedException("getCode Constructor Allocation");
    }

}
