{"version":3,"file":"autocomplete.d.ts","sources":["autocomplete.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, InjectionToken, QueryList, TemplateRef, OnDestroy } from '@angular/core';\nimport { CanDisableRipple, CanDisableRippleCtor, _MatOptgroupBase, _MatOptionBase, MatOption, MatOptgroup } from '@angular/material/core';\n/** Event object that is emitted when an autocomplete option is selected. */\nexport declare class MatAutocompleteSelectedEvent {\n    /** Reference to the autocomplete panel that emitted the event. */\n    source: _MatAutocompleteBase;\n    /** Option that was selected. */\n    option: _MatOptionBase;\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source: _MatAutocompleteBase, \n    /** Option that was selected. */\n    option: _MatOptionBase);\n}\n/** Event object that is emitted when an autocomplete option is activated. */\nexport interface MatAutocompleteActivatedEvent {\n    /** Reference to the autocomplete panel that emitted the event. */\n    source: _MatAutocompleteBase;\n    /** Option that was selected. */\n    option: _MatOptionBase | null;\n}\n/** @docs-private */\ndeclare class MatAutocompleteBase {\n}\ndeclare const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase;\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n    /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n    autoActiveFirstOption?: boolean;\n    /** Class or list of classes to be applied to the autocomplete's overlay panel. */\n    overlayPanelClass?: string | string[];\n}\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport declare const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS: InjectionToken<MatAutocompleteDefaultOptions>;\n/** @docs-private */\nexport declare function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions;\n/** Base class with all of the `MatAutocomplete` functionality. */\nexport declare abstract class _MatAutocompleteBase extends _MatAutocompleteMixinBase implements AfterContentInit, CanDisableRipple, OnDestroy {\n    private _changeDetectorRef;\n    private _elementRef;\n    private _activeOptionChanges;\n    /** Class to apply to the panel when it's visible. */\n    protected abstract _visibleClass: string;\n    /** Class to apply to the panel when it's hidden. */\n    protected abstract _hiddenClass: string;\n    /** Manages active item in option list based on key events. */\n    _keyManager: ActiveDescendantKeyManager<_MatOptionBase>;\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel: boolean;\n    /** Whether the autocomplete panel is open. */\n    get isOpen(): boolean;\n    _isOpen: boolean;\n    /** @docs-private */\n    template: TemplateRef<any>;\n    /** Element for the panel containing the autocomplete options. */\n    panel: ElementRef;\n    /** @docs-private */\n    abstract options: QueryList<_MatOptionBase>;\n    /** @docs-private */\n    abstract optionGroups: QueryList<_MatOptgroupBase>;\n    /** Aria label of the autocomplete. */\n    ariaLabel: string;\n    /** Input that can be used to specify the `aria-labelledby` attribute. */\n    ariaLabelledby: string;\n    /** Function that maps an option's control value to its display value in the trigger. */\n    displayWith: ((value: any) => string) | null;\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    get autoActiveFirstOption(): boolean;\n    set autoActiveFirstOption(value: boolean);\n    private _autoActiveFirstOption;\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     */\n    panelWidth: string | number;\n    /** Event that is emitted whenever an option from the list is selected. */\n    readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent>;\n    /** Event that is emitted when the autocomplete panel is opened. */\n    readonly opened: EventEmitter<void>;\n    /** Event that is emitted when the autocomplete panel is closed. */\n    readonly closed: EventEmitter<void>;\n    /** Emits whenever an option is activated using the keyboard. */\n    readonly optionActivated: EventEmitter<MatAutocompleteActivatedEvent>;\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value: string | string[]);\n    _classList: {\n        [key: string]: boolean;\n    };\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id: string;\n    /**\n     * Tells any descendant `mat-optgroup` to use the inert a11y pattern.\n     * @docs-private\n     */\n    readonly inertGroups: boolean;\n    constructor(_changeDetectorRef: ChangeDetectorRef, _elementRef: ElementRef<HTMLElement>, defaults: MatAutocompleteDefaultOptions, platform?: Platform);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop: number): void;\n    /** Returns the panel's scrollTop. */\n    _getScrollTop(): number;\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility(): void;\n    /** Emits the `select` event. */\n    _emitSelectEvent(option: _MatOptionBase): void;\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId: string): string | null;\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n    private _setVisibilityClasses;\n    static ngAcceptInputType_autoActiveFirstOption: BooleanInput;\n    static ngAcceptInputType_disableRipple: BooleanInput;\n}\nexport declare class MatAutocomplete extends _MatAutocompleteBase {\n    optionGroups: QueryList<MatOptgroup>;\n    options: QueryList<MatOption>;\n    protected _visibleClass: string;\n    protected _hiddenClass: string;\n}\nexport {};\n"]}