(* module containing typical values of the floating-point format
 * used, binary16, in order to simulate binary16 computations
 * with standard ocaml float values
 *)
module Bounds =
  struct
    let name = "b16"
    (* machine epsilon = smallest representable positive value *)
    let eps = 0.000000059604645
    (* largest representable values = interval [min, max] *)
    let max = 65504.
    let min = -. max
  end

(* *)
let name = "BE"

module Itv = Intervals_double

let base_type = Ast.RealT

(* no option *)
let parse_param _ = ()

let fprint_help fmt = Format.fprintf fmt "Le domaine par défaut. Mini float en intervalles"

(* To implement your own non relational abstract domain,
 * first give the type of its elements.
 * an abstract element is a tuple x=(isNan, isMInf, isPInf, interval)
 * where:
 * - isNan  tells whether NaN is present in gamma(x)
 * - isMInf tells whether -∞  is present in gamma(x)
 * - isPInf tells whether +∞  is present in gamma(x)
 * - interval is the interval of normal values in binary16 range
 *   present in gamma(x)
 *)
type t = bool * bool * bool * Itv.t
       
(* a printing function (useful for debuging), *)
let fprint ff = function
  | (isNan, isMInf, isPInf, itv) ->
     begin
       if isNan  then Format.fprintf ff "NaN ⊔ ";
       if isMInf then Format.fprintf ff "-∞ ⊔ ";
       if isPInf then Format.fprintf ff "+∞ ⊔ ";
       Itv.fprint ff itv
     end
        
(* the order of the lattice. *)
let order (isNan1, isMInf1, isPInf1, itv1) (isNan2, isMInf2, isPInf2, itv2) =
  false (* TODO *)
     
(* and infimums of the lattice. *)
let top = false, false, false, Itv.bottom (* TODO *)
let bottom = false, false, false, Itv.bottom (* TODO *)

let is_bottom x = x = bottom
  
(* All the functions below are safe overapproximations.
 * You can keep them as this in a first implementation,
 * then refine them only when you need it to improve
 * the precision of your analyses. *)

let join (isNan1, isMInf1, isPInf1, itv1) (isNan2, isMInf2, isPInf2, itv2) =
  (* TODO *)
  top

let meet (isNan1, isMInf1, isPInf1, itv1) (isNan2, isMInf2, isPInf2, itv2) =
  (* TODO *)
  top

let widening (isNan1, isMInf1, isPInf1, itv1) (isNan2, isMInf2, isPInf2, itv2) =
  (* TODO *)
  top

let sem_itv n1 n2 = top (*TODO *)

let sem_plus x y = top (*TODO *)
let sem_minus x y = top (*TODO *)
let sem_times x y = top (*TODO *)
let sem_div x y = top (*TODO *)

let sem_geq0 = function
  | t -> t (*TODO *)


(* imprecise abstractions for trigonometric functions sine and cosine.
 * We have:
 * sin(Nan) = sin(+oo) = sin(-oo) = Nan
 * sin([a, b]) = [-1, 1]
 *)
let sem_sin (isNan1, isMInf1, isPInf1, itv1) =
  (isNan1 || isMInf1 || isPInf1, false, false, Itv.sem_itv (-. 1.) 1.)

let sem_cos = sem_sin

let sem_call funname arg_list =
  match funname, arg_list with
  | "sin", [x] -> sem_sin x
  | "cos", [x] -> sem_cos x
  | "exp", [x] -> top (* TODO *)
  | "ln", [x]  -> top (* TODO *)
  | _          -> top 

let backsem_plus x y r = x, y (* TODO *)
let backsem_minus x y r = x, y (* TODO *)
let backsem_times x y r = x, y (* TODO *)
let backsem_div x y r = x, y (* TODO *)
