-- Implantation du module Arbre_Genealogique.


with Ada.Characters.Latin_1;    use Ada.Characters.Latin_1;
with Ada.Text_IO; 		use Ada.Text_IO;
with Alea;

package body Arbre_Genealogique is 
	
    
    package Mon_Alea is
            new Alea (1000, 9999);  -- Générateur de nombre dans l'intervalle [1000, 9999].
    use Mon_Alea;

    -------------------------------------------------------------------------------

    procedure Display_Item (Item: in Integer) is
    begin
        Put (Integer'Image(Item) & "  ");
    end Display_Item;


    procedure To_String is new Appliquer_Sur_Tous (Display_Item);
	
    -------------------------------------------------------------------------------

    -- Générer un ID unique.
    function Generate_ID (Ab : in T_ABG) return Integer is
        ID : Integer;
    begin
        loop
            Get_Random_Number (ID);
            exit when not (Is_Present (Ab, ID));
        end loop;
        return ID;                  
    end Generate_ID;

    -------------------------------------------------------------------------------
    
    procedure Creer_Arbre_Minimal (Ab : out T_ABG; ID : in Integer) is
    begin
        if (Is_Empty (Ab)) then
            Create_Node (Ab, ID);
            New_Line;
            Put_Line (ESC & "[32m" & "RÉUSSI : " & ESC & "[0m" & "Création d'arbre minimal est fait avec succés.");
        else
            New_Line;
            Put_Line (ESC & "[31m" & "ÉCHOUÉ :" & ESC & "[0m" & " L'arbre passé en paramètre n'est pas vide. L'opération Créer un arbre minimal a échoué.");
        end if;
    end Creer_Arbre_Minimal;

    -------------------------------------------------------------------------------

    procedure Ajouter_Parent (Ab : in out T_ABG; ID, New_ID, Flag : in Integer) is
    	
        procedure Find_Person (Ab : in out T_ABG; ID, Flag : in Integer) is
            L, R: T_ABG;
        begin
            if (Is_Empty (Ab)) then
                Null;
            else
                L := Get_Left (Ab);
                R := Get_Right (Ab);
                if (ID = Get_ID (Ab)) then
                    if ((not Is_empty (L)) and (not Is_empty (R))) then
                        New_Line;
                        Put_Line (ESC & "[31m" & "ÉCHOUÉ : " & ESC & "[0m" & "l'individu a déjà deux parents. L'ajout du parent a échoué.");
                        Raise DEUX_PARENTS_PRESENTS_EXCEPTION;
                    elsif (Flag = 0) then
                        Create_Node (L, New_ID);
                        Set_Left (Ab, L);
                        New_Line;
                        Put_Line ("Le nouvel ID du parent est :" & Integer'Image (New_ID) & ".");
                        New_Line;
                        Put_Line (ESC & "[32m" & "RÉUSSI : " & ESC & "[0m" & "Ajout du parent est fait avec succés.");
                    elsif (Flag = 1) then 
                        Create_Node (R, New_ID);
                        Set_Right (Ab, R);
                        New_Line;
                        Put_Line ("Le nouvel ID du parent est :" & Integer'Image (New_ID) & ".");
                        New_Line;                                        
                        Put_Line (ESC & "[32m" & "RÉUSSI : " & ESC & "[0m" & "Ajout du parent est fait avec succés.");
                    end if;
                else
                    Find_Person (L, ID, Flag);
                    Find_Person (R, ID, Flag);
                end if; 
            end if;
        end Find_Person;
	

    begin
        if (not ( Is_Present (Ab, ID))) then
            New_Line;
            Put_Line (ESC & "[31m" & "ÉCHOUÉ : " & ESC & "[0m" & "l'ID n'existe pas. L'ajout du parent a échoué.");
            Raise ID_ABSENT_EXCETION;
        else
            Find_Person (Ab, ID, Flag);
        end if;
    end Ajouter_Parent;

    -------------------------------------------------------------------------------

    function Nombre_Ancetres (Ab : in T_ABG; ID : in Integer) return Integer is

        
        procedure Get_Sub_Tree (Ab : in T_ABG; ID_Tree : out T_ABG) is
        begin
            if (Is_Empty (Ab)) then
                Null;
            else
                if (ID = Get_ID (Ab)) then
                    ID_Tree := Ab;
                else
                    Get_Sub_Tree (Get_Left (AB), ID_Tree);
                    Get_Sub_Tree (Get_Right (AB), ID_Tree);
                end if;
            end if;
        end Get_Sub_Tree;
        

        ID_Tree : T_ABG;
                
          
    begin
        if (not ( Is_Present (Ab, ID))) then
            Raise ID_ABSENT_EXCETION;
        else
            New_Line;
            Get_Sub_Tree (Ab, ID_Tree);
            return Height (ID_Tree);
        end if;
    end Nombre_Ancetres;
	
    -------------------------------------------------------------------------------
	
    procedure Ancetres_N_Generation (Ab : in T_ABG; ID : in Integer; Generation : in Integer) is
	

        procedure Ancestor_N_Generation (Ab : in T_ABG; E : in out T_Ensemble; Generation : in Integer) is
        begin
            if (Is_Empty (Ab)) then
                Null;
            elsif (Generation = 0 and not (Is_Empty (Ab))) then
                Ajouter (E, Get_ID (Ab));
            else
                Ancestor_N_Generation (Get_Left (Ab), E, Generation - 1);
                Ancestor_N_Generation (Get_Right (Ab), E, Generation - 1);
            end if;
        end Ancestor_N_Generation;
	

        procedure Find_Person (Ab : in T_ABG; E : in out T_Ensemble; ID : in Integer; Generation : in Integer) is
        begin
            if (Is_Empty (Ab)) then
                Null;
            else
                if (ID = Get_ID (Ab)) then
                    Ancestor_N_Generation (Ab, E, Generation);
                else
                    Find_Person (Get_Left (AB), E, ID, Generation);
                    Find_Person (Get_Right (AB), E, ID, Generation);
                end if;
            end if;
        end Find_Person;


        E : T_Ensemble;
	
	
    begin
        Initialiser (E);
        find_person (Ab, E, ID, Generation);
        Put ("L'ensemble dans ancetres situés à la géneration" & Integer'Image (Generation) & "est : ");
        To_String (E);
    end Ancetres_N_Generation;
	
    -------------------------------------------------------------------------------

    function depth (Ab : in T_ABG) return Integer is
		
		
        function max (a, b : in Integer) return Integer is
        begin 
            if (a > b) then
                return a;
            else 
                return b;
            end if;
        end max;
	
	
    begin
        if (Is_Empty (Ab)) then
            return 0;
        else
            return 1 + max (depth (Get_Left (Ab)), depth (Get_Right (Ab)));
        end if;
    end depth;
	
    -------------------------------------------------------------------------------

    procedure Afficher_Arbre_Noeud (Ab : in T_ABG; ID : in Integer) is
	

        procedure Indenter(Decalage : in Integer) is
        begin
            for i in 1..Decalage loop
                Put (' ');
            end loop;
        end Indenter;


        procedure Afficher_Profondeur (Abr : in T_ABG ; Profondeur : in Integer ; Cote : in String) is
        begin
            if (Is_Empty (Abr)) then
                Null;
            else
                Indenter (Profondeur * 4);
                Put (Cote);
                Put (Integer'Image (Get_ID (Abr)));
                New_Line;
                Afficher_Profondeur (Get_Left (Abr), Profondeur + 1, "-- père :");
                Afficher_Profondeur (Get_Right (Abr), Profondeur + 1, "-- mère :");
            end if;
        end Afficher_Profondeur;


        procedure Afficher_Generations (Ab : in T_ABG) is
        begin
            New_Line;
            for i in 1..depth(Ab) loop
                Put (Integer'Image(i - 1));
                Indenter(4);
            end loop;
            Put_Line ("Generation");
            for i in 0..depth (Ab) loop
                Put ("---------");
            end loop;
            New_Line;
        end Afficher_Generations;

        procedure Get_Sub_Tree (Ab : in T_ABG; ID_Tree : out T_ABG) is
        begin
            if (Is_Empty (Ab)) then
                Null;
            else
                if (ID = Get_ID (Ab)) then
                    ID_Tree := Ab;
                else
                    Get_Sub_Tree (Get_Left (AB), ID_Tree);
                    Get_Sub_Tree (Get_Right (AB), ID_Tree);
                end if;
            end if;
        end Get_Sub_Tree;
        

        ID_Tree : T_ABG;
        
    begin
        if (not ( Is_Present (Ab, ID))) then
            Raise ID_ABSENT_EXCETION;
        else
            Get_Sub_Tree (Ab, ID_Tree);
            Afficher_Generations (ID_Tree);
            Afficher_Profondeur (ID_Tree, 0, "");
        end if;
    end Afficher_Arbre_Noeud;
	
    -------------------------------------------------------------------------------


    procedure Supprimer (Ab : in out T_ABG; ID : in Integer) is
        
        
         procedure Get_Sub_Tree (Ab : in T_ABG; ID_Tree : out T_ABG) is
        begin
            if (Is_Empty (Ab)) then
                Null;
            else
                if (ID = Get_ID (Ab)) then
                    ID_Tree := Ab;
                else
                    Get_Sub_Tree (Get_Left (AB), ID_Tree);
                    Get_Sub_Tree (Get_Right (AB), ID_Tree);
                end if;
            end if;
        end Get_Sub_Tree;
        

        ID_Tree : T_ABG;
        
    begin
        if (not ( Is_Present (Ab, ID))) then
            Raise ID_ABSENT_EXCETION;
        else
            Get_Sub_Tree (Ab, ID_Tree);
            Destruct (ID_Tree);
            New_Line;
            Put_Line (ESC & "[32m" & "RÉUSSI : " & ESC & "[0m" & "Suppression de l'arbre est faite avec succés.");
        end if;
    end Supprimer;

    -------------------------------------------------------------------------------

    procedure Individus_1_Parent_Connu (Ab : in T_ABG) is
		

        procedure Person_1_Parent (Ab : in T_ABG; E : out T_Ensemble) is
        begin
            if (Is_Empty (Ab)) then
                Null;
            else
                if (not (Is_Empty (Get_Left (AB))) and  Is_empty (Get_Right (AB))) then
                    Ajouter (E, Get_ID (Ab));
                elsif (Is_empty (Get_Left (AB)) and (not (Is_empty (Get_Right (AB))))) then
                    Ajouter (E, Get_ID (Ab));
                end if;
                Person_1_Parent (Get_Left (AB), E);
                Person_1_Parent (Get_Right (AB), E);
            end if;
        end Person_1_Parent;


        E : T_Ensemble;

	
    begin
        Person_1_Parent (Ab, E);
        To_String (E);
    end Individus_1_Parent_Connu; 
	
    -------------------------------------------------------------------------------

    procedure Individus_2_Parent_Connu (Ab : in T_ABG) is

		
        procedure Person_2_Parent (Ab : in T_ABG; E : out T_Ensemble) is
        begin
            if (Is_Empty (Ab)) then
                Null;
            elsif (not (Is_Empty (Get_Left (Ab))) and not(Is_Empty (Get_Right (Ab)))) then
                Ajouter (E, Get_ID (Ab));
            else
                Person_2_Parent (Get_Left (Ab), E);
                Person_2_Parent (Get_Right (Ab), E);
            end if;
        end Person_2_Parent;


        E : T_Ensemble;
        
	
    begin
        Person_2_Parent (Ab, E);
        To_String (E);
    end Individus_2_Parent_Connu;

    -------------------------------------------------------------------------------

    procedure Ensemble_Feuilles (Ab : in T_ABG) is
	        
		
        procedure Person_0_Parent (Ab : in T_ABG; E : out T_Ensemble) is
        begin 
            if (Is_Empty (Ab)) then
                Null;
            elsif (Is_Empty (Get_Left (Ab)) and Is_Empty (Get_Right (Ab))) then
                Ajouter (E, Get_ID (Ab));
            else
                Person_0_Parent (Get_Left (Ab), E);
                Person_0_Parent (Get_Right (Ab), E);
            end if;
        end Person_0_Parent;
		
        E : T_Ensemble;
    begin
        Person_0_Parent (Ab, E);
        To_String (E);
    end Ensemble_Feuilles;

    -------------------------------------------------------------------------------

    procedure Ancetres_Sur_N_Generation (Ab : in T_ABG; ID : in Integer; Generation : in Integer) is
        
        
       procedure Ancestor_N_Generation (Ab : in T_ABG; E : in out T_Ensemble; Generation : in Integer) is
        begin
            if (Is_Empty (Ab)) then
                Null;
            elsif (Generation >= 0 and not (Is_Empty (Ab))) then
                Ajouter (E, Get_ID (Ab));
            else
                Ancestor_N_Generation (Get_Left (Ab), E, Generation - 1);
                Ancestor_N_Generation (Get_Right (Ab), E, Generation - 1);
            end if;
        end Ancestor_N_Generation;
	

        procedure Find_Person (Ab : in T_ABG; E : in out T_Ensemble; ID : in Integer; Generation : in Integer) is
        begin
            if (Is_Empty (Ab)) then
                Null;
            else
                if (ID = Get_ID (Ab)) then
                    Ancestor_N_Generation (Ab, E, Generation);
                else
                    Find_Person (Get_Left (AB), E, ID, Generation);
                    Find_Person (Get_Right (AB), E, ID, Generation);
                end if;
            end if;
        end Find_Person;


        E : T_Ensemble;
	
	
    begin
        find_person (Ab, E, ID, Generation);
        Put ("L'ensemble dans ancetres sur" & Integer'Image (Generation) & " géneration est : ");
        To_String (E);
    end Ancetres_Sur_N_Generation;

    -------------------------------------------------------------------------------

    function Ancetres_Homonymes (Ab : in T_ABG; ID1 : in Integer; ID2 : in Integer) return Boolean is
        pragma Unreferenced (Ab, ID1, ID2);
    begin
        return True;
    end Ancetres_Homonymes;

    -------------------------------------------------------------------------------

end Arbre_Genealogique;
