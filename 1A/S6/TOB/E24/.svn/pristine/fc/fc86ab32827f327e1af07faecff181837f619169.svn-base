import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Observable;
import java.util.Set;
/**
 * L'ensemble de plats dans la commande du client
 * @author ISSAM
 *
 */
public class Choix extends Observable {
	
	//public String payement;
	public Map<String, ArrayList<PlatResto>> map;
	
	/** Constructeur des choix
	 * 
	 */
	public Choix() {
		this.map = new HashMap<>();
	}
	
	/** Le prix total de la commande du client
	 * 
	 * @return le prix total
	 */
	public double getPrixTotal() {
		double prix = 0;
		Set<Entry<String, ArrayList<PlatResto>>> mapSet = map.entrySet();
		for (Entry<String, ArrayList<PlatResto>> entry : mapSet) {
			ArrayList<PlatResto> listPlats = entry.getValue();
			for (Plat plat : listPlats) {
				prix = prix + plat.getPrixPlat();
			}
		}
		return prix;
	}
	
//	/**
//	 * @author Younes Saoudi
//	 * @param str
//	 * @param index
//	 * @return
//	 */
//	public String convertInttoStr(String str, int index) {
//		String new_nbr_str = "";
//		if (str.charAt(index-3) == 'x') {
//			int duplicate_nbr_1 = (int)str.charAt(index-2) - 48;
//			duplicate_nbr_1 ++;
//			if (duplicate_nbr_1 == 10) {
//				new_nbr_str = "10";
//			}else {
//				char new_nbr_char_1=(char)(duplicate_nbr_1+'0');
//				new_nbr_str = String.valueOf(new_nbr_char_1) ;
//			}
//			str = str.substring(0, index-2) 
//		              + new_nbr_str
//		              + str.substring(index-2 + 1);	
//		}else if(str.charAt(index-4) == 'x'){
//			int duplicate_nbr_10 = (int)str.charAt(index-3) - 48;
//			int duplicate_nbr_1 = (int)str.charAt(index-2) - 48;
//			//duplicate_nbr_10 ++;
//			duplicate_nbr_1 ++;
//			if (duplicate_nbr_1 == 10) {
//				duplicate_nbr_1 = 0;
//				duplicate_nbr_10++;
//				if(duplicate_nbr_10 == 10) {
//					new_nbr_str = "100";
//				}else {
//					char new_nbr_char_10=(char)(duplicate_nbr_10+'0');
//					char new_nbr_char_1=(char)(duplicate_nbr_1+'0');
//					new_nbr_str = String.valueOf(new_nbr_char_10) 
//							+ String.valueOf(new_nbr_char_1);
//				}
//			} else {
//				char new_nbr_char_10=(char)(duplicate_nbr_10+'0');
//				char new_nbr_char_1=(char)(duplicate_nbr_1+'0');
//				new_nbr_str = String.valueOf(new_nbr_char_10) 
//						+ String.valueOf(new_nbr_char_1);
//			}
//			str = str.substring(0, index-3) 
//					+ new_nbr_str
//					+ str.substring(index-2 + 1);
//		} else {
//			int duplicate_nbr_100 = (int)str.charAt(index-4) - 48;
//			int duplicate_nbr_10 = (int)str.charAt(index-3) - 48;
//			int duplicate_nbr_1 = (int)str.charAt(index-2) - 48;
//			duplicate_nbr_1 ++;
//			if (duplicate_nbr_1 == 10) {
//				duplicate_nbr_1 = 0;
//				duplicate_nbr_10++;
//				if(duplicate_nbr_10 == 10) {
//					duplicate_nbr_10 = 0;
//					duplicate_nbr_100++;
//				}
//			}
//			char new_nbr_char_100 =(char)(duplicate_nbr_100+'0');
//			char new_nbr_char_10=(char)(duplicate_nbr_10+'0');
//			char new_nbr_char_1=(char)(duplicate_nbr_1+'0');
//			new_nbr_str = String.valueOf(new_nbr_char_100)
//					+ String.valueOf(new_nbr_char_10) 
//					+ String.valueOf(new_nbr_char_1);
//			str = str.substring(0, index-4) 
//					+ new_nbr_str
//					+ str.substring(index-2 + 1);
//			
//		}
//		return str;
//	}
	
	public String conversion(String str, String nomPlat) {
		int indice = str.indexOf(nomPlat) - 3;
		String valeurString = str.substring(indice-1, indice+1); 
		if ( !java.lang.Character.isDigit((valeurString.charAt(0)))) {
			int valeur = (int) (valeurString.charAt(1) - '0') + 1;
			if (valeur != 10) {
				char rep = (char) (valeur + '0');
				str = str.substring(0, indice) + rep + str.substring(indice + 1);
			} else {
				str = str.substring(0, indice) + '1' + str.substring(indice + 1);
				str = str.substring(0, indice + 1) + '0'+' ' + str.substring(indice + 2);
			}
		} else {
			int valeur = Integer.parseInt(valeurString) + 1; 
			char rep2 = Integer.toString(valeur).charAt(1);
			char rep1 = Integer.toString(valeur).charAt(0);
			str = str.substring(0,indice) + rep2 + str.substring(indice +1);
			str = str.substring(0, indice -1) + rep1 + str.substring(indice);		
		}
		return str;
	}

	/** Version string de la commande choisie
	 * 
	 * @return la commande
	 */
	public String toStringCommande() {
		String str = "<html>";
		Set<Entry<String, ArrayList<PlatResto>>> mapSet = map.entrySet();
		for (Entry<String, ArrayList<PlatResto>> entry : mapSet) {
			ArrayList<PlatResto> listPlats = entry.getValue();
			for (PlatResto plat : listPlats) {
				String nomPlat = plat.getNomPlat();
				if (str.contains(String.valueOf(((nomPlat))))) {
					str = conversion(str, nomPlat);
				} else {
					str = str + "<br/>    <br/> &emsp x1  " + plat.getNomPlat();
				}
			}
		}
		return str;
	}
	
	/**
	 * @author Younes Saoudi
	 * @return
	 */
	public String toStringCommandePAY() {
		String str = "";
		Set<Entry<String, ArrayList<PlatResto>>> mapSet = map.entrySet();
		for (Entry<String, ArrayList<PlatResto>> entry : mapSet) {
			ArrayList<PlatResto> listPlats = entry.getValue();
			for (PlatResto plat : listPlats) {
				String nomPlat = plat.getNomPlat();
				if (str.contains(String.valueOf(((nomPlat))))) {
					str = conversion(str, nomPlat);
				} else {
					str = str + " x1  " + plat.getNomPlat();
				}
			}
		}
		return str;
	}

	
	
	/** Version String des entrées choisies
	 * par l'utilisateur
	 * @return les entrées
	 */
	public String toStringEntree() {
		String str = "";
		Set<Entry<String, ArrayList<PlatResto>>> mapSet = map.entrySet();
		for (Entry<String, ArrayList<PlatResto>> entry : mapSet) {
			if (entry.getKey() == "Entree") {
				ArrayList<PlatResto> listPlats = entry.getValue();
				for (PlatResto plat : listPlats) {
					String nomPlat = plat.getNomPlat();
					if (str.contains(String.valueOf(((nomPlat))))) {
						str = conversion(str, nomPlat);
					} else {
						str = str + "<br/>    <br/> &emsp x1  " + plat.getNomPlat();
					}
				}
			}
		}
		return str;
	}
	
	/** Version String des plats principaux choisis
	 * par l'utilisateur
	 * @return les plats principaux
	 */
	public String toStringPlatPrincipal() {
		String str = "";
		Set<Entry<String, ArrayList<PlatResto>>> mapSet = map.entrySet();
		for (Entry<String, ArrayList<PlatResto>> entry : mapSet) {
			if (entry.getKey() == "Plat Principal") {
				ArrayList<PlatResto> listPlats = entry.getValue();
				for (Plat plat : listPlats) {
					String nomPlat = plat.getNomPlat();
					if (str.contains(String.valueOf(((nomPlat))))) {
						str = conversion(str, nomPlat);
					} else {
						str = str + "<br/>    <br/> &emsp x1  " + plat.getNomPlat();
					}
				}
			}
		}
		return str;
	}
	
	/** Version String des desserts choisies
	 * par l'utilisateur
	 * @return les desserts
	 */
	public String toStringDessert() {
		String str = "";
		Set<Entry<String, ArrayList<PlatResto>>> mapSet = map.entrySet();
		for (Entry<String, ArrayList<PlatResto>> entry : mapSet) {
			if (entry.getKey() == "Dessert") {
				ArrayList<PlatResto> listPlats = entry.getValue();
				for (Plat plat : listPlats) {
					String nomPlat = plat.getNomPlat();
					if (str.contains(String.valueOf(((nomPlat))))) {
						str = conversion(str, nomPlat);
					} else {
						str = str + "<br/>    <br/> &emsp x1  " + plat.getNomPlat();
					}
				}
			}
		}
		return str;
	}
	
	
	/** Ajouter une entrée à l'ensemble au commande
	 * 
	 * @param lesEntrees les entrées
	 */
	public void ajouterEntree(ArrayList<PlatResto> lesEntrees ) {
		this.map.put("Entree", lesEntrees);
		this.setChanged();
		this.notifyObservers();
	}
	
	/** Ajouter des plats principaux au commande
	 * 
	 * @param lesPlatsP les plat principaux
	 */
	public void ajouterPlatPrincipal(ArrayList<PlatResto> lesPlatsP ) {
		this.map.put("Plat Principal", lesPlatsP);
		this.setChanged();
		this.notifyObservers();
	}
	
	/** Ajouter des desserts au commande
	 * 
	 * @param lesDesserts les desserts
	 */
	public void ajouterDessert(ArrayList<PlatResto> lesDesserts ) {
		this.map.put("Dessert", lesDesserts);
		this.setChanged();
		this.notifyObservers();
	}
	
	public void clearMap() {
		this.map.clear();
	}
	

	
		

}
