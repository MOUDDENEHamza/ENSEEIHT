import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.Graphics2D;
import java.awt.GraphicsEnvironment;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Observable;
import java.util.Observer;
import java.util.UUID;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
/**
 * La version graphique (swing) du menu
 * @author ISSAM
 *
 */
@SuppressWarnings("deprecation")
public class MenuSwing implements Observer {
	

	private Menu menu;
	private JFrame fenetre;
	private Choix choix;
	private JButton bEntree, bPlatP, bDessert, bSignOut, bPay, bCancelOrder, 
					bAccount, bHistory, bRewardPoint,bCustomerName;
	private boolean bCustomerNamehasBeenClicked = false;
	private JScrollPane scrollPane;
	private JLabel logo, footerLabel, recapLabel;
	private JPanel headCenter, headRight, footer, recap, panel0;
	private Color Background;
	private JLabel text;
	private Customer Customer;
	private ActionListener B_Pay = new ActionPay();
	//private ActionListener B_Account = new ActionShowAccDetails(); (will be implemented later)
	//private ActionListener B_History = new ActionShowHistory();	(will be implemented later)
	public ArrayList<PlatResto> listChoixEntree = new ArrayList<PlatResto>();
	public ArrayList<PlatResto> listChoixPlatP = new ArrayList<PlatResto>();
	public ArrayList<PlatResto> listChoixDessert = new ArrayList<PlatResto>();

	//Les dimensions de la fen�tre et des constantes utiles dans le design
	public final static Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
	public final static int width = screenSize.width;
	public final static int height = screenSize.height;
	int actual_height = height - height*40/864 - height*75/864; //La vraie hauteur de la fen�tre (ayant soustrait l'ent�te et le bas de page) 

	
	/**Constructeur du menu version Swing
	 * 
	 * @param menu le menu 
	 */
	public MenuSwing(Menu menu, Choix choix, Customer Customer) {
		
		this.Customer = Customer;
		GUI MenuModel = new GUI();
		this.menu = menu;
		this.choix = choix;
		//Ajouter un observateur � l'objet choix , pour assurer l'int�ractivit� entre les composantes de l'appli . 
		this.choix.addObserver(this);
		this.Background = Color.WHITE;
		//La cr�ation de la fen�tre
		this.fenetre = MenuModel.createWindow("Menu", 0, 0);
		//Maximiser automatiquement la fen�tre
		this.fenetre.setExtendedState(this.fenetre.getExtendedState() | JFrame.MAXIMIZED_BOTH); 
		this.fenetre.getContentPane().setBackground(Background);

		//La partie gauche de l'ent�te
		if(Customer.getLastName().equals("NULL") && Customer.getFirstName().equals("NULL")) {
			this.logo = MenuModel.createLabel("Customer", 70*width/1536, 0, 120, 40);
			this.fenetre.add(logo);
		}else {
			//Making the Pop-Up Buttons which appear when clicking on the logged-in customer's name
			//@author Younes Saoudi
			bCustomerName = MenuModel.createButton(Customer.getFirstName() + " " + Customer.getLastName(), width*23/1536, height*10/864, 210, 20, null, null);
			bCustomerName.setOpaque(false);
			bCustomerName.setContentAreaFilled(false);
			bCustomerName.setForeground(Color.BLACK);
			this.fenetre.add(bCustomerName);
			
			//Making the pop up menu
			JPanel panel = new JPanel();
			panel.setLayout(new GridLayout(3, 1));
			String [] Button_Names = {"Account Details","Purchase History","Loyalty Points"};
			bAccount = new JButton(Button_Names[0]);
			bHistory = new JButton(Button_Names[1]);
			bRewardPoint = new JButton(Button_Names[2]);
			
			bAccount.setPreferredSize(new Dimension(180, 35));
			bHistory.setPreferredSize(new Dimension(180, 35));
			bRewardPoint.setPreferredSize(new Dimension(180, 35));
			
			bAccount.setBackground(Color.BLACK);
			bHistory.setBackground(Color.BLACK);
			bRewardPoint.setBackground(Color.BLACK);
			
			bAccount.setForeground(Color.WHITE);
			bHistory.setForeground(Color.WHITE);
			bRewardPoint.setForeground(Color.WHITE);			
			
			//this.bAccount.addActionListener(new ActionShowAccDetails());
			//this.bHistory.addActionListener(new ActionShowHistory());
			this.bRewardPoint.addActionListener(new ActionRewardPoint());
			
			panel.add(bAccount);
			panel.add(bRewardPoint);
			panel.add(bHistory);
			
			//Setting the button fonts.
			try {
				GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
				Font Uniform_Light = Font.createFont(Font.TRUETYPE_FONT, new File("fonts/Uniform Light.ttf")).deriveFont(15f);
				ge.registerFont(Uniform_Light);
				bAccount.setFont(Uniform_Light);
				bHistory.setFont(Uniform_Light);
				bRewardPoint.setFont(Uniform_Light);
			    bCustomerName.setFont(Uniform_Light);
			} catch (IOException|FontFormatException e) {
				e.printStackTrace();
			}
			
			//Panel containing the (eventually) scroll-able pop-up menu
			JPanel container = new JPanel(new FlowLayout(FlowLayout.CENTER, 0, 0));
			container.add(panel);
			scrollPane = new JScrollPane(container);
			scrollPane.setVisible(false);
			panel0 = MenuModel.createPanel(width*227/1536, height*5/864, 200, 150, null);
			panel0.setOpaque(false); //transparent panel, only buttons appear
			panel0.add(scrollPane);
			
			/**	What happens when the bCustomerName button is clicked
			 * @author Younes Saoudi
			 */
			bCustomerName.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {
					//if the pop-up menu is not visible
					if(!bCustomerNamehasBeenClicked) {
						scrollPane.setVisible(true);
						bCustomerNamehasBeenClicked = true;
						fenetre.invalidate();
						fenetre.validate();
						fenetre.repaint();
					}else {
						bCustomerNamehasBeenClicked = false;
						scrollPane.setVisible(false);
					}
				}

			});
			this.fenetre.add(panel0);
		}
		
        //La partie droite de l'ent�te
		this.headCenter = MenuModel.createPanel(width * 176/1536, 0, width * 1024/1536, 40, Background);
		this.fenetre.add(this.headCenter);
		this.headRight = MenuModel.createPanel(width * 176/1536 + width * 1024/1536, 0, 
				width * 336/1536, 40, Background);
		this.text = MenuModel.createLabel("Menu", 10, 10, 200, 40);
		this.headRight.add(text);
		this.fenetre.add(this.headRight);
		
		
		this.bSignOut = MenuModel.createButton("Exit to Main Menu", 0, 0, 100, 40, new Color(220, 53, 69), Color.WHITE);
		//Fermer l'application en cliquant sur le boutton SignOut
		this.bSignOut.addActionListener(new ActionSignOut());
		
        //BAS DE PAGE
		this.footer = MenuModel.createPanel(0, height*725/864, width, 75, Background);
        this.footer.setLayout(new BorderLayout());
        this.footerLabel = MenuModel.createLabel("� 2020 Resto'N7 ", 0, 0, 100, 50);
        this.footer.add(this.bSignOut, BorderLayout.NORTH);
        this.footer.add(this.footerLabel, BorderLayout.CENTER);
        this.fenetre.add(this.footer);
        
        //Cr�ation des bouttons de la pages
		this.bEntree = MenuModel.createButton("Entrees", width/4 , actual_height/2 + height*110/864,
				100, 40, new Color(15, 125, 102), Color.WHITE);
		//R�cup�rer les entr�es en cliquant sur le boutton Entr�es
		this.bEntree.addActionListener(new ActionEntree());
		
        this.bPlatP = MenuModel.createButton("Plats Principaux", 2*width/4 - width *100/1536, actual_height/2 + height*110/864,
        		200, 40,new Color(171, 94, 79) , Color.WHITE);
		this.bPlatP.addActionListener(new ActionPlatPrincipal());

        this.bDessert = MenuModel.createButton("Desserts", 3*width/4 - width *100/1536, actual_height/2 + height*110/864,
        		140, 40, new Color(238, 94, 138), Color.WHITE);
		this.bDessert.addActionListener(new ActionDessert());

		//this.bRewardPoint= MenuModel.createButton("Points de fidélité", width/2 - width *100/1536, actual_height/2,
        //		200, 40, new Color(189, 51, 164), Color.WHITE);
		

		this.bCancelOrder = MenuModel.createButton("Cancel Order", width/2 - width *205/1536, actual_height/2 + height*220/864,
				200, 40, new Color(161,59,81), Color.WHITE);
		this.bCancelOrder.addActionListener(new ActionCancelOrder());
		
		this.bPay = MenuModel.createButton("Pay", width/2 + width *5/1536, actual_height/2 + height*220/864,
				200, 40, new Color(94,141,85), Color.WHITE);
		this.bPay.addActionListener(B_Pay);
	

		
		//Writing the Welcome sign for both logged-in customers and guests
		JLabel Welcome = MenuModel.createLabel("Welcome, ",width *250/1536, actual_height/4 - actual_height*75/749,width,100);
        JLabel FullName =  MenuModel.createLabel(Customer.getFirstName()+" "+Customer.getLastName()+" ...",width*500/1536, actual_height/4,width,100);
        if(Customer.getLastName().equals("NULL") && Customer.getFirstName().equals("NULL")) {
        	Welcome.setText("Welcome!");
        	Welcome.setLocation(width*600/1536, actual_height/4 - actual_height*75/749);
        	FullName.setText("");
        }
        Welcome.setForeground(new Color(247, 167, 80));
        FullName.setForeground(new Color(247, 167, 80));
        //Adding the labels to the JFrame
        this.fenetre.add(Welcome);
        this.fenetre.add(FullName);
		
		
		//Ajouter l'ensemble des bouttons au fen�tre
        this.fenetre.add(bEntree);
        this.fenetre.add(bPlatP);
        this.fenetre.add(bDessert);
        //this.fenetre.add(bRewardPoint);
        this.fenetre.add(bPay);
        this.fenetre.add(bCancelOrder);        
        
		//R�capitulatif du client
        this.recap = MenuModel.createPanel(5, 40, width*175/1536, actual_height- height*75/864, null);
        this.recap.setLayout(new BorderLayout());
        this.recapLabel = 
        		MenuModel.createLabel("<html>My Order :"+this.choix.toStringCommande()+"<br/>    <br/>TOTAL : "
        		+this.choix.getPrixTotal()+" �</html>"
        		,0, 0, 0, 0);
        this.recap.add(recapLabel);
        this.fenetre.add(recap);
		
        //Setting up the fonts for all the remaining Swing Assets
        try {
		     GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
		     Font Museo_1000 = Font.createFont(Font.TRUETYPE_FONT, new File("fonts/Museo Slab W00 1000.ttf")).deriveFont(70f);
		     ge.registerFont(Museo_1000);
		     //Font Museo_300 = Font.createFont(Font.TRUETYPE_FONT, new File("fonts/Museo Slab W00 300.ttf")).deriveFont(15f);
		     //ge.registerFont(Museo_300);
		     Font Museo_500 = Font.createFont(Font.TRUETYPE_FONT, new File("fonts/Museo Slab W00 500.otf")).deriveFont(15f);
		     ge.registerFont(Museo_500);
		     Font Uniform_Condensed_3 = Font.createFont(Font.TRUETYPE_FONT, new File("fonts/Uniform Condensed Black.ttf")).deriveFont(15f);
		     ge.registerFont(Uniform_Condensed_3);
		     Font Uniform_Light = Font.createFont(Font.TRUETYPE_FONT, new File("fonts/Uniform Light.ttf")).deriveFont(15f);
		     ge.registerFont(Uniform_Light);
		     this.bSignOut.setFont(Uniform_Light);
		     this.footerLabel.setFont(Uniform_Light);
		     this.text.setFont(Uniform_Light);
		     Welcome.setFont(Museo_1000);
		     FullName.setFont(Museo_1000);
		     this.bEntree.setFont(Museo_500);
		     this.bPlatP.setFont(Museo_500);
		     this.bDessert.setFont(Museo_500);
		     if((Customer.getLastName().equals("NULL") && Customer.getFirstName().equals("NULL"))) {
					this.logo.setFont(Uniform_Light);
				}
		     this.bPay.setFont(Museo_500);
		     this.bCancelOrder.setFont(Museo_500);
		     this.recapLabel.setFont(Uniform_Condensed_3);
		} catch (IOException|FontFormatException e) {
		     e.printStackTrace();
		}

        //Faciliter la fermeture de la fen�tre et la rendre visible
		fenetre.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		fenetre.setVisible(true);
		bEntree.repaint();
		bPlatP.repaint();
		bDessert.repaint();
		bPay.repaint();
		bSignOut.repaint();
		if(!(Customer.getLastName().equals("NULL") && Customer.getFirstName().equals("NULL"))) {
			scrollPane.repaint();
			panel0.repaint();
		}
	}
	
	
	/**
	 * Redimensionner une image
	 * @param source l'image source
	 * @param width largeur
	 * @param height longueur
	 * @return
	 */
	public Image scaleImage(Image source, int width, int height) {
	    BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
	    Graphics2D g = (Graphics2D) img.getGraphics();
	    g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
	    g.drawImage(source, 0, 0, width, height, null);
	    g.dispose();
	    return img;
	}


	@Override
	public void update(Observable arg0, Object arg1) {
		this.recapLabel.setText("<html>My Order :"+this.choix.toStringCommande()+"<br/>    <br/>TOTAL : "
        		+this.choix.getPrixTotal()+" �</html>");
	}
	
	
	public class ActionEntree implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			//Make the pop-up menu disappear if it's visible
			if(bCustomerNamehasBeenClicked) {
				scrollPane.setVisible(false);
				bCustomerNamehasBeenClicked = false;
			}
			fenetre.dispose();
			new EntreeSwing(MenuSwing.this);
		}

	}
	

	
	public class ActionPlatPrincipal implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			//Make the pop-up menu disappear if it's visible
			if(bCustomerNamehasBeenClicked) {
				scrollPane.setVisible(false);
				bCustomerNamehasBeenClicked = false;
			}
			fenetre.dispose();
			new PlatPrincipauxSwing(MenuSwing.this);
		}

	}
	
	
	public class ActionDessert implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			//Make the pop-up menu disappear if it's visible
			if(bCustomerNamehasBeenClicked) {
				scrollPane.setVisible(false);
				bCustomerNamehasBeenClicked = false;
			}
			fenetre.dispose();
			new DessertSwing(MenuSwing.this);
		}

	}
	
	public class ActionRewardPoint implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			fenetre.dispose();
			new RewardPointSwing(Customer);
		}

	}
	
	
	public class ActionCancelOrder implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			choix.clearMap();
			fenetre.dispose();
			MenuSwing newMenu = new MenuSwing(menu, choix, Customer);
			JFrame previous = newMenu.getFenetre();
			previous.setVisible(true);
		}

	}
	
	
	
	
	

	public class ActionSignOut implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			fenetre.dispose();
			Home home = new Home();
			JFrame window = home.getWindow();
			new SignIn(window);
		}

	}
	/**
	 * Payer la commande
	 * @author Younes Saoudi
	 *
	 */
	public class ActionPay implements ActionListener{
		public void actionPerformed(ActionEvent arg0) {
			//Make the pop-up menu disappear
			if(bCustomerNamehasBeenClicked) {
				scrollPane.setVisible(false); 
				bCustomerNamehasBeenClicked = false;
			}
			JSONParser parser = new JSONParser();
			if(!choix.toStringCommandePAY().equals("")){
				try {
					JSONArray orderList = (JSONArray) parser.parse(new FileReader("data/orders.json"));
					SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		        	//Date of creation
		            Date date = new Date(); 
					// new Order
					JSONObject newOrder = new JSONObject();
					newOrder.put("OrderNm", UUID.randomUUID().toString());
					newOrder.put("TableNm", "N.25");//N.01 --> N.50 || TAKEOUT (JcomboBox) !! 
					newOrder.put("Payment", "Credit Card");// --> Cash || Credit Card (JcomboBox) !!
					newOrder.put("Status",  "In Progress");
					newOrder.put("Order", choix.toStringCommandePAY());
					newOrder.put("Price",  choix.getPrixTotal()+" �");
					newOrder.put("Customer", Customer.getFirstName() +" " + Customer.getLastName());
					newOrder.put("Edits","");
					newOrder.put("Created", formatter.format(date));

					// Add the new order to the order list after making its format more Human-readable	
					orderList.add(newOrder);
					
					//Add the reward Points
					Customer.addPoints(Math.floor(choix.getPrixTotal()));
					
					// Write the new orderList to the JSON file
					try (FileWriter file = new FileWriter("data/orders.json")) {

						file.write(orderList.toJSONString());
						file.flush();

					} catch (IOException e) {
						e.printStackTrace();
					}

				} catch (FileNotFoundException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				} catch (ParseException e) {
					e.printStackTrace();
				}
				EmployeeInterface.updateHumanFriendlyOrdersDATABASE();	
			} else {
				JOptionPane.showMessageDialog(fenetre,"Please make a selection first!");
			}
		}
	}
	public Menu getMenu() {
		return this.menu;
	}
	
	public Choix getChoix() {
		return this.choix;
	}
	
	public Customer getCustomer() {
		return this.Customer;
	}
	
	public JFrame getFenetre() {
		return this.fenetre;
	}
	

}
