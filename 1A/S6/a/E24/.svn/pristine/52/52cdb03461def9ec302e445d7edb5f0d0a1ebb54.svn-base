import java.util.ArrayList;

/**History maintains a chronological history of the reals recorded.
  * The history is unbounded (use of an ArrayList), except by
 * compared to the amount of available memory (OutOfMemoryException)!
 * @author LOTFI
 * @version 0.1
 */

public class History {
	
	private ArrayList<Double> values;	
	private ArrayList<Date1> dates;
	

	/** Build an empty history. */
	//@ ensures getNbValues() == 0;	// Empty History
	
	public History() {
		this.values = new ArrayList<Double>();
		this.dates = new ArrayList<Date1>();
	}
	
	 /** Save new information in the history
	 * @param info the information to be recorded in the history
	 * @param Date the date associate at this information 
	 */
	public void record(double info, Date1 date) {
		this.values.add(info);
		this.dates.add(date);
	}
	
	/** return the value associated to the i th operation
	* @param i transaction index included in 1 and getNbValeurs ().
	* @return this value
	*/
	public /*@ pure @*/ double getValue(int i) {
		return this.values.get(i-1) ;
	}
	
	/** return the date associated to the i th operation
	* @param i transaction index included in 1 and getNbValeurs ().
	* @return this date
	*/
	public /*@ pure @*/ Date1 getDate(int i) {
		return this.dates.get(i-1) ;
	}
	
	/** The number of integers recorded in the history
     * @return the number of integers in the history
     */

	public /*@ pure @*/ int getNbValues() {
		return this.values.size();
	}
	
	public String toString() {
		return this.values.toString() + this.dates.toString();
	}
}
