/** First program */
node rising_edge (X: bool) returns (Y:bool);
let
    Y = X -> (X and not pre(X));
tel

node falling_edge (X: bool) returns (Y:bool);
let
    Y = rising_edge(not X);
tel

node verification (X: bool) returns (Y:bool);
var P1, P2 : bool;
let
    P1 = (rising_edge(X) = falling_edge(not(X)));
    P2 = (rising_edge(not(X)) = falling_edge(X));
    Y = P1 and P2;
tel

/* Exercise 1 */
node counter(const N : int; RAZ : bool) returns (Top : bool);
var cpt : int;
let
	cpt = if RAZ then 
		    0 
	      else 
		    0 -> pre(cpt) + 1;
	Top = (cpt = N); 
tel

node simu_counter(RAZ : bool) returns (Top : bool);
let
    Top = counter(4, RAZ);
tel

/** Exercise 2 */
node keep(x: bool; RAZ: bool) returns (y: bool);
let
    y = false ->
                if x then
                    true
                else
                    if RAZ then
                        false
                    else
                        pre(y);
tel

/** Excercice 3 */
node once_since_n(const N : int ; RAZ : bool) returns (y : bool);
var cpt: int; tmp: bool;
let
    tmp = false -> RAZ or pre(y);
    cpt = if (tmp) then (if RAZ then 0 else pre(cpt) + 1) else 0;
    y = tmp and cpt <= N;
tel

node once_since_n_simu(RAZ : bool) returns (y : bool);
let
    y = once_since_n(3, RAZ);
tel

/** Exercise 4 */
node metronome1(rhythm : int) returns (tic, tac, toc, tut : bool);
let
    tic = 
        if rhythm = 1 then
            true
        else if rhythm = 2 then
            if (true -> pre(tac)) then true else false
        else if rhythm = 3 then
            if (true -> pre(toc)) then true else false
        else 
            if (true -> pre(tut)) then true else false;
    tac = 
        if rhythm = 1 then
            false
        else
            if (false -> pre(tic)) then true else false;
    toc = 
        if rhythm = 1 or rhythm = 2 then
            false
        else 
            if (false -> pre(tac)) then true else false;
    tut = 
        if rhythm = 1 or rhythm = 2 or rhythm = 3 then
            false
        else 
            if (false -> pre(toc)) then true else false;
tel

node metronome2(rhythm : int) returns (tic, tac, toc, tut : bool);
var cpt: int;
let
    cpt = 1 -> pre(cpt) + 1;
    tic = 
        if rhythm = 1 then
            true
        else if rhythm <= 4 and rhythm >= 1 then
            if (cpt mod rhythm = 1) then true else false
        else false;
    tac = 
        if rhythm = 1 then
            false
        else if rhythm <= 4 and rhythm >= 1 then
            if (cpt mod rhythm = 0 and rhythm = 2) or (cpt mod rhythm = 2 and rhythm <> 2) then true else false
        else false;
    toc = 
        if rhythm = 1 or rhythm = 2 then
            false
        else if rhythm <= 4 and rhythm >= 1 then
            if (cpt mod rhythm = 0 and rhythm = 3) or (cpt mod rhythm = 3 and rhythm <> 2) then true else false
        else false;
    tut = 
        if rhythm = 1 or rhythm = 2 or rhythm = 3 then
            false
        else if rhythm <= 4 and rhythm >= 1 then
            if (cpt mod rhythm = 0) then true else false
        else false;
tel

node metronome3(rhythm, freq : int) returns (tic, tac, toc, tut : bool);
var cpt, cpt_freq: int;
let
    cpt_freq = 1 -> pre(cpt_freq) + 1;
    cpt = 1 -> pre(cpt) + 1;
    tic = 
        if rhythm = 1 and cpt_freq mod freq = 0 then
            true
        else if rhythm <= 4 and rhythm >= 1 then
            if (cpt mod rhythm = 1 and cpt_freq mod freq = 0) then true else false
        else false;
    tac = 
        if rhythm = 1  then
            false
        else if rhythm <= 4 and rhythm >= 1 then
            if (cpt mod rhythm = 0 and rhythm = 2) or (cpt mod rhythm = 2 and rhythm <> 2) and cpt_freq mod freq = 0  then true else false
        else false;
    toc = 
        if rhythm = 1 or rhythm = 2 then
            false
        else if rhythm <= 4 and rhythm >= 1 then
            if (cpt mod rhythm = 0 and rhythm = 3) or (cpt mod rhythm = 3 and rhythm <> 2) and cpt_freq mod freq = 0 then true else false
        else false;
    tut = 
        if rhythm = 1 or rhythm = 2 or rhythm = 3 then
            false
        else if rhythm <= 4 and rhythm >= 1 then
            if (cpt mod rhythm = 0 and cpt_freq mod freq = 0) then true else false
        else false;
tel

node prog(x:int) returns (y:int);
let
    y = x -> pre(x -> y + pre(y));
tel